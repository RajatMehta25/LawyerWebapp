{"version":3,"sources":["pages/Testimonial/TestElement.js","pages/Testimonial/Add_Edit_Test.js","components/Overlay.js","components/Input.js","../node_modules/@material-ui/icons/ArrowBack.js","../node_modules/@material-ui/core/esm/Paper/Paper.js","utils/validators.js","utils/Functions.js","../node_modules/@material-ui/icons/Wallpaper.js"],"names":["MainBox","styled","div","InnerBox","CommonRow","CommonLabel","CommonBox","InputArea","textarea","ButtonBox","SubmitButton","button","UploadRow","UploadCommon","useStyles","makeStyles","theme","root","flexWrap","margin","spacing","extendedIcon","marginRight","paperHeading","padding","table","minWidth","textMiddle","verticalAlign","iconMargin","color","backgroundColor","iconcolor","headingButton","display","flexDirection","justifyContent","headingAlignment","alignItems","width","gap","textAlign","addNewCategory","addNewCategoryHeading","flex","paddingBottom","MarginControl","Marginbutton","container","maxHeight","paperPaddingRightLeft","AddEdit_Press","props","classes","state","location","fileRef","useRef","useState","get","profileImagepath","setProfileImagepath","isLoading","setIsLoading","clientName","image","description","_id","pressValues","SubmitTest","values","a","console","log","pressData","axios","post","data","toast","success","message","position","POSITION","TOP_RIGHT","history","push","error","Fragment","className","Paper","elevation","classNames","headingSellerDetails","Button","variant","aria-label","onClick","window","confirm","pathname","style","marginBottom","marginLeft","enableReinitialize","initialValues","validate","vals","testValidator","validateOnChange","onSubmit","formikBag","formStyleOnly","name","field","Input","type","value","onChange","e","setFieldValue","target","touched","errors","placeholder","ref","hidden","accept","uploadImage","files","current","click","height","objectFit","borderRadius","src","alt","paddingTop","fontSize","Overlay","OverWrapper","direction","viewheight","spin","keyframes","Circle","primary","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","React","_default","createElement","d","_props$component","component","Component","_props$square","square","_props$elevation","_props$variant","other","_objectWithoutProperties","_extends","clsx","outlined","concat","rounded","withStyles","elevations","shadows","forEach","shadow","index","boxShadow","palette","background","paper","text","transition","transitions","create","shape","border","divider","messages","FeildManageValidatorPassword","email","password","newPassword","TemplateValidator","upload_docs","price","service_details","sign_fee","disAppValidator","first_Name_check","first_Name","last_Name_check","last_Name","user_email_check","user_email","mobile_Number_check","mobile_Number","user_business_logo_check","user_business_logo","user_firm_name_check","user_firm_name","pressValidator","yearDate","title","length","catValidator","catName","desciption","attValidator","fieldType","valueInArray","opNameValidator","option_name","notificationValidator","blogValidator","short_description","details_description","subAdminEmailValidator","match","roleManagementValidator","roll_name","roll_access","panel","SubAdminManagementValidator","roll_access_id","role","file","formData","FormData","append","then","res","path","catch","err"],"mappings":"6+EAEO,IAAMA,EAAUC,IAAOC,IAAV,KAOPC,EAAWF,IAAOC,IAAV,KASRE,EAAYH,IAAOC,IAAV,KAMTG,EAAcJ,IAAOC,IAAV,KAQXI,EAAYL,IAAOC,IAAV,KAQTK,EAAYN,IAAOO,SAAV,KAeTC,EAAYR,IAAOC,IAAV,KAOTQ,EAAeT,IAAOU,OAAV,KASZC,EAAYX,IAAOC,IAAV,KAMTW,EAAeZ,IAAOC,IAAV,K,mBC7CnBY,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,QAGZC,OAAQ,CACNA,OAAQH,EAAMI,QAAQ,IAExBC,aAAc,CACZC,YAAaN,EAAMI,QAAQ,IAE7BG,aAAc,CACZC,QAAS,aAEXC,MAAO,CACLC,SAAU,KAEZC,WAAY,CACVC,cAAe,qBAEjBC,WAAY,CACVV,OAAQ,SACRW,MAAO,UACPC,gBAAiB,QAEnBC,UAAW,CACTb,OAAQ,SACRW,MAAO,OACPC,gBAAiB,sBAEnBE,cAAe,CACbC,QAAS,OACTC,cAAe,MACfC,eAAgB,eAChBZ,QAAS,QAEXa,iBAAiB,aACfH,QAAS,OACTC,cAAe,MACfC,eAAgB,gBAEhBE,WAAY,SACZpB,SAAU,QACT,2BAA6B,CAE5BiB,cAAe,SACfI,MAAO,OACPC,IAAK,OACLJ,eAAgB,SAChBK,UAAW,WAGfC,eAAe,aACbR,QAAS,OACTI,WAAY,SACZpB,SAAU,QACT,2BAA6B,CAE5BiB,cAAe,SACfI,MAAO,OACPC,IAAK,OACLJ,eAAgB,SAChBK,UAAW,WAGfE,sBAAsB,aACpBF,UAAW,SACXG,KAAM,EACNC,cAAe,gBACd,2BAA6B,CAE5BV,cAAe,SACfI,MAAO,OACPC,IAAK,OACLJ,eAAgB,SAChBK,UAAW,WAGfK,cAAc,eACX,2BAA6B,CAE5B3B,OAAQ,iBAGZ4B,aAAc,CACZ5B,OAAQ,UAEV6B,UAAW,CACTC,UAAW,QAEbC,sBAAuB,CACrB1B,QAAS,iBA0UE2B,UAtUO,SAACC,GACrB,IAAMC,EAAUvC,IAKFwC,EACVF,EADFG,SAAYD,MAGRE,EAAUC,iBAAO,MATQ,EAUiBC,mBAC9CC,cAAIL,EAAO,QAAS,KAXS,mBAUxBM,EAVwB,KAUNC,EAVM,OAaGH,oBAAS,GAbZ,mBAaxBI,EAbwB,KAabC,EAba,OAcOL,mBAAS,CAC7CM,WAAYL,cAAIL,EAAO,aAAc,IACrCW,MAAON,cAAIL,EAAO,QAAS,IAC3BY,YAAaP,cAAIL,EAAO,cAAe,IACvCC,SAAUI,cAAIL,EAAO,WAAY,IACjCa,IAAKR,cAAIL,EAAO,MAAO,MAnBM,mBAcxBc,EAdwB,KAqBzBC,GArByB,KAqBf,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,yDACjBC,QAAQC,IAAIH,GACZP,GAAa,GACTW,EAAY,CACdV,WAAYM,EAAON,WACnBC,MAAOK,EAAOL,MACdC,YAAaI,EAAOJ,YACpBX,SAAUe,EAAOf,SACjBY,IAAKG,EAAOH,MAEVG,EAAOH,IAVM,0CAYUQ,IAAMC,KAC3B,2BACAF,GAdW,gBAYLG,EAZK,EAYLA,KAIRL,QAAQC,IAAII,GACZC,IAAMC,QAAQF,EAAKG,QAAS,CAC1BC,SAAUH,IAAMI,SAASC,YAE3BpB,GAAa,GACbX,EAAMgC,QAAQC,KAAK,2BArBN,kDAuBbtB,GAAa,GACbe,IAAMQ,MAAN,UAAe,KAAMT,KAAKA,KAAKG,SAAW,CACxCC,SAAUH,IAAMI,SAASC,YAzBd,2DA8BUR,IAAMC,KAAK,2BAA4B,CAC5DZ,WAAYM,EAAON,WACnBC,MAAOK,EAAOL,MACdC,YAAaI,EAAOJ,YACpBX,SAAUe,EAAOf,WAlCN,iBA8BLsB,EA9BK,EA8BLA,KAMRL,QAAQC,IAAII,GACZC,IAAMC,QAAQF,EAAKG,QAAS,CAC1BC,SAAUH,IAAMI,SAASC,YAE3B/B,EAAMgC,QAAQC,KAAK,2BAxCN,mDA0CbP,IAAMQ,MAAN,UAAe,KAAMT,KAAKA,KAAKG,SAAW,CACxCC,SAAUH,IAAMI,SAASC,YA3Cd,kEAAH,uDAiDhB,OACE,kBAAC,IAAMI,SAAP,KACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAWnC,EAAQpC,MACtB,kBAACwE,EAAA,EAAD,KACE,yBAAKD,UAAWnC,EAAQH,uBACtB,yBAAKsC,UAAU,QACb,kBAACC,EAAA,EAAD,CACEC,UAAW,EACXF,UAAWG,IACTtC,EAAQ9B,aACR8B,EAAQX,iBAGV,yBAAK8C,UAAWnC,EAAQuC,sBACtB,kBAACC,EAAA,EAAD,CACEC,QAAQ,WACRC,aAAW,MACXP,UAAWnC,EAAQxB,WACnBmE,QAAS,WACHC,OAAOC,QAAQ,kCACjB9C,EAAMgC,QAAQC,KAAK,CACjBc,SAAU,8BAKhB,kBAAC,IAAD,QAGJ,yBAAKX,UAAWG,IAAWtC,EAAQV,wBAChC,IACD,wBACE6C,UAAWG,IAAWtC,EAAQP,eAC9BsD,MAAO,CAAEC,aAAc,UAAWC,WAAY,WAE7C9B,QAAQC,IAAInB,GACXA,EAAD,4CAIP,kBAAC,IAAD,CACEiD,oBAAkB,EAClBC,cAAepC,EACfqC,SAAU,SAACC,GAAD,OAAUC,YAAcD,IAClCE,kBAAgB,EAChBC,SAAUxC,IAET,SAACyC,GACA,OACE,kBAAC,IAAD,CAAMtB,UAAWnC,EAAQ0D,eACvB,kBAAC/G,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,qBACA,kBAACC,EAAD,KAEE,kBAAC,IAAD,CAAO0G,KAAK,eACT,gBAAGC,EAAH,EAAGA,MAAH,OACC,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEEE,KAAK,OACLC,MAAON,EAAUxC,OAAON,WACxBqD,SAAU,SAACC,GACTR,EAAUS,cACR,aACAD,EAAEE,OAAOJ,QAGb9B,MACEwB,EAAUW,QAAQzD,YAClB8C,EAAUY,OAAO1D,WACb8C,EAAUY,OAAO1D,WACjB,KAENwB,UAAU,eACVmC,YAAY,sBAMtB,kBAACvH,EAAD,KACE,kBAACQ,EAAD,KACE,kBAACC,EAAD,KACE,kBAACR,EAAD,iBAEF,kBAACQ,EAAD,CAAc2E,UAAU,SACtB,2BACEoC,IAAKpE,EACLwD,KAAK,QACLa,QAAM,EACNV,KAAK,OACLW,OAAO,oCACPT,SAAQ,uCAAE,WAAOC,GAAP,eAAA/C,EAAA,sEAGSwD,YACfT,EAAEE,OAAOQ,MAAM,IAJT,OAGJnD,EAHI,OAQRL,QAAQC,IAAII,GACZiC,EAAUS,cAAc,QAAS1C,GACjChB,EAAoBgB,GAVZ,2CAAF,wDAaV,kBAACnE,EAAD,CACEyG,KAAK,SACLnB,QAAS,WACPxC,EAAQyE,QAAQC,UAHpB,WASF,kBAACrH,EAAD,KACwB,KAArB+C,GACC,kBAAC,IAAD,CACEwC,MAAO,CACL+B,OAAQ,QACR5F,MAAO,QACP6F,UAAW,QACXC,aAAc,SAIE,KAArBzE,GACC,yBACE0E,IAAK1E,EACL2E,IAAI,MACJnC,MAAO,CACL7D,MAAO,QACP4F,OAAQ,QACRC,UAAW,QACXC,aAAc,WAMxB,kBAAC/H,EAAD,KACGwG,EAAUY,OAAOzD,OAClB6C,EAAUW,QAAQxD,MAChB,uBACEmC,MAAO,CACLoC,WAAY,EACZC,SAAU,GACV3G,MAAO,QAGRgF,EAAUY,OAAOzD,OAElB,OAGR,kBAAC7D,EAAD,KACE,kBAACC,EAAD,qBAEE,2BACE+F,MAAO,CACLqC,SAAU,SACVvG,QAAS,OACTI,WAAY,WAJhB,sBAFF,MAaA,kBAAChC,EAAD,KACE,kBAAC,IAAD,CAAO0G,KAAK,gBACT,gBAAGC,EAAH,EAAGA,MAAH,OACC,kBAAC1G,EAAD,iBACM0G,EADN,CAEEE,KAAK,OACLC,MAAON,EAAUxC,OAAOJ,YACxBmD,SAAU,SAACC,GACTR,EAAUS,cACR,cACAD,EAAEE,OAAOJ,QAGb9B,MACEwB,EAAUW,QAAQvD,aAClB4C,EAAUY,OAAOxD,YACb4C,EAAUY,OAAOxD,YACjB,KAENsB,UAAU,eACVmC,YAAY,oBAIjBb,EAAUY,OAAOxD,aAClB4C,EAAUW,QAAQvD,YAChB,uBACEkC,MAAO,CACLoC,WAAY,EACZC,SAAU,GACV3G,MAAO,QAGRgF,EAAUY,OAAOxD,aAElB,OAGR,kBAAC9D,EAAD,KACE,kBAACC,EAAD,kBACA,kBAACC,EAAD,KAEE,kBAAC,IAAD,CAAO0G,KAAK,aACT,gBAAGC,EAAH,EAAGA,MAAH,OACC,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEEE,KAAK,OACLC,MAAON,EAAUxC,OAAOf,SACxB8D,SAAU,SAACC,GACTR,EAAUS,cACR,WACAD,EAAEE,OAAOJ,QAGb9B,MACEwB,EAAUW,QAAQlE,UAClBuD,EAAUY,OAAOnE,SACbuD,EAAUY,OAAOnE,SACjB,KAENiC,UAAU,eACVmC,YAAY,mBAMtB,kBAAClH,EAAD,KACE,kBAACC,EAAD,CAAcyG,KAAK,UAAnB,oBAavBrD,GAAa,kBAAC4E,EAAA,EAAD,S,udC5bpB,IAAMC,EAAc1I,IAAOC,KACzB,SAAAkD,GAAK,0DAEeA,EAAMwF,WAAa,SAFlC,mCAGgBxF,EAAMhB,gBAAkB,aAHxC,+BAIYgB,EAAMd,YAAc,aAJhC,2BAKQc,EAAM6B,SAAW7B,EAAM6B,SAAW,QAL1C,6CAOO7B,EAAMyF,WAAazF,EAAMyF,WAAa,QAP7C,6FAYgBzF,EAAMrB,iBAAmB,qBAZzC,oDAiBD+G,EAAOC,YAAH,KAIJC,EAAS/I,IAAOC,IAAV,KACU,SAAAkD,GAAK,OAAIA,EAAMpC,MAAMiI,UAM5BH,GAkBAJ,IAdf,SAAiBtF,GAAQ,IACf6B,EAAqD7B,EAArD6B,SAAU2D,EAA2CxF,EAA3CwF,UAAW7G,EAAgCqB,EAAhCrB,gBAAiB8G,EAAezF,EAAfyF,WAC9C,OACE,kBAACF,EAAD,CACE1D,SAAUA,EACV2D,UAAWA,EACX7G,gBAAiBA,EACjB8G,WAAYA,GAEZ,kBAACG,EAAD,S,iCC9CN,sDAEe,SAAS9B,EAAM9D,GAAQ,IAC5BkC,EAAUlC,EAAVkC,MACR,OACE,oCACE,2CAAWlC,EAAX,CAAkBoC,UAAU,eAAeY,MAAO,CAACtE,MAAO,YACzDwD,EACC,uBAAGc,MAAO,CAAEoC,WAAY,EAAGC,SAAU,GAAI3G,MAAO,QAAUwD,GACxD,Q,iCCPV,IAAI4D,EAAyBC,EAAQ,KAEjCC,EAA0BD,EAAQ,KAEtCE,OAAOC,eAAeC,EAAS,aAAc,CAC3CnC,OAAO,IAETmC,EAAQC,aAAU,EAElB,IAAIC,EAAQL,EAAwBD,EAAQ,IAIxCO,GAAW,EAFMR,EAAuBC,EAAQ,MAElBK,SAAuBC,EAAME,cAAc,OAAQ,CACnFC,EAAG,iEACD,aAEJL,EAAQC,QAAUE,G,iCCnBlB,iDAiCIjE,EAAqBgE,cAAiB,SAAerG,EAAOwE,GAC9D,IAAIvE,EAAUD,EAAMC,QAChBmC,EAAYpC,EAAMoC,UAClBqE,EAAmBzG,EAAM0G,UACzBC,OAAiC,IAArBF,EAA8B,MAAQA,EAClDG,EAAgB5G,EAAM6G,OACtBA,OAA2B,IAAlBD,GAAmCA,EAC5CE,EAAmB9G,EAAMsC,UACzBA,OAAiC,IAArBwE,EAA8B,EAAIA,EAC9CC,EAAiB/G,EAAM0C,QACvBA,OAA6B,IAAnBqE,EAA4B,YAAcA,EACpDC,EAAQC,YAAyBjH,EAAO,CAAC,UAAW,YAAa,YAAa,SAAU,YAAa,YAEzG,OAAoBqG,gBAAoBM,EAAWO,YAAS,CAC1D9E,UAAW+E,YAAKlH,EAAQpC,KAAMuE,EAAuB,aAAZM,EAAyBzC,EAAQmH,SAAWnH,EAAQ,YAAYoH,OAAO/E,KAAcuE,GAAU5G,EAAQqH,SAChJ9C,IAAKA,GACJwC,OA6DUO,iBAvGK,SAAgB3J,GAClC,IAAI4J,EAAa,GAMjB,OALA5J,EAAM6J,QAAQC,SAAQ,SAAUC,EAAQC,GACtCJ,EAAW,YAAYH,OAAOO,IAAU,CACtCC,UAAWF,MAGRT,YAAS,CAEdrJ,KAAM,CACJc,gBAAiBf,EAAMkK,QAAQC,WAAWC,MAC1CtJ,MAAOd,EAAMkK,QAAQG,KAAKpC,QAC1BqC,WAAYtK,EAAMuK,YAAYC,OAAO,eAIvCd,QAAS,CACPrC,aAAcrH,EAAMyK,MAAMpD,cAI5BmC,SAAU,CACRkB,OAAQ,aAAajB,OAAOzJ,EAAMkK,QAAQS,WAE3Cf,KA+E6B,CAChC5D,KAAM,YADO2D,CAEZlF,I,qeChHGmG,EACK,qBAqwCEC,EAA+B,SAACvH,GAE3C,IAAIoD,EAAS,GAUb,OATKpD,EAAOwH,QACVpE,EAAOoE,MAAQ,qBAEZxH,EAAOyH,WACVrE,EAAOqE,SAAW,4BAEfzH,EAAO0H,cACVtE,EAAOsE,YAAc,4BAEhBtE,GAGIuE,EAAoB,SAAC3H,GAChCE,QAAQC,IAAIH,GACZ,IAAIoD,EAAS,GA0Bb,OAzBKpD,EAAO0C,OACVU,EAAOV,KAAO,6BAEX1C,EAAO4H,cACVxE,EAAOwE,YAAc,2BAGnB5H,EAAO6H,MAAQ,IACjBzE,EAAOyE,MAAQ,gCAEZ7H,EAAO6H,QACVzE,EAAOyE,MAAQ,qBAEZ7H,EAAO8H,kBACV1E,EAAO0E,gBAAkB,+BAEtB9H,EAAOJ,cACVwD,EAAOxD,YAAc,2BAEnBI,EAAO+H,SAAW,IACpB3E,EAAO2E,SAAW,mCAEf/H,EAAO+H,WACV3E,EAAO2E,SAAW,wBAEb3E,GAGI4E,EAAkB,SAAChI,GAC9BE,QAAQC,IAAIH,GACZ,IAAIoD,EAAS,GA+Bb,OA9B+B,GAA3BpD,EAAOiI,mBACJjI,EAAOkI,aACV9E,EAAO8E,WAAaZ,IAGM,GAA1BtH,EAAOmI,kBACJnI,EAAOoI,YACVhF,EAAOgF,UAAYd,IAGQ,GAA3BtH,EAAOqI,mBACJrI,EAAOsI,aACVlF,EAAOkF,WAAahB,IAGU,GAA9BtH,EAAOuI,sBACJvI,EAAOwI,gBACVpF,EAAOoF,cAAgBlB,IAGY,GAAnCtH,EAAOyI,2BACJzI,EAAO0I,qBACVtF,EAAOsF,mBAAqBpB,IAGG,GAA/BtH,EAAO2I,uBACJ3I,EAAO4I,iBACVxF,EAAOwF,eAAiBtB,IAGrBlE,GAEIyF,EAAiB,SAAC7I,GAC7B,IAAIoD,EAAS,GAYb,OAXKpD,EAAO8I,WACV1F,EAAO0F,SAAW,oBAEf9I,EAAO+I,MAED/I,EAAO+I,MAAMC,OAAS,KAC/B5F,EAAO2F,MAAQ,iDAFf3F,EAAO2F,MAAQ,oBAIZ/I,EAAOJ,cACVwD,EAAOxD,YAAc,2BAEhBwD,GAEIf,EAAgB,SAACrC,GAC5B,IAAIoD,EAAS,GAkBb,OAjBKpD,EAAON,WAEDM,EAAON,WAAWsJ,OAAS,KACpC5F,EAAO1D,WAAa,uDAFpB0D,EAAO1D,WAAa,0BAIjBM,EAAOL,MAAM,KAChByD,EAAOzD,MAAQ,gBAEZK,EAAOJ,cACVwD,EAAOxD,YAAc,2BAEnBI,EAAOJ,YAAYoJ,OAAS,MAC9B5F,EAAOxD,YAAc,wDAElBI,EAAOf,WACVmE,EAAOnE,SAAW,uBAEbmE,GAEI6F,EAAe,SAACjJ,GAC3BE,QAAQC,IAAIH,GACZ,IAAIoD,EAAS,GAWb,OAVKpD,EAAOkJ,QAEDlJ,EAAOkJ,QAAQF,OAAS,KACjC5F,EAAO8F,QAAU,gDAFjB9F,EAAO8F,QAAU,mBAIdlJ,EAAOmJ,WAEDnJ,EAAOmJ,WAAWH,OAAS,MACpC5F,EAAO+F,WAAa,wDAFpB/F,EAAO+F,WAAa,0BAIf/F,GAEIgG,EAAe,SAACpJ,GAC3BE,QAAQC,IAAIH,GACZ,IAAIoD,EAAS,GAcb,OAbKpD,EAAOqJ,UAEmB,YAApBrJ,EAAOqJ,WACkB,GAA9BrJ,EAAOsJ,aAAaN,SACtB5F,EAAOkG,aAAe,uBAHxBlG,EAAOiG,UAAY,mBAMhBrJ,EAAO+I,QACV3F,EAAO2F,MAAQ,qBAEZ/I,EAAOqD,cACVD,EAAOC,YAAc,2BAEhBD,GAEImG,EAAkB,SAACvJ,GAC9B,IAAIoD,EAAS,GAIb,OAHKpD,EAAOwJ,cACVpG,EAAOoG,YAAc,oBAEhBpG,GAEIqG,EAAwB,SAACzJ,GACpC,IAAIoD,EAAS,GAeb,OAdKpD,EAAO+I,MAED/I,EAAO+I,MAAMC,OAAS,KAC/B5F,EAAO2F,MAAQ,iDAFf3F,EAAO2F,MAAQ,oBAIZ/I,EAAOJ,YAEDI,EAAOJ,YAAYoJ,OAAS,MACrC5F,EAAOxD,YAAc,wDAFrBwD,EAAOxD,YAAc,0BAOvBM,QAAQC,IAAIH,GACLoD,GAEIsG,EAAgB,SAAC1J,GAC5BE,QAAQC,IAAIH,GACZ,IAAIoD,EAAS,GAkBb,OAjBKpD,EAAO+I,MAED/I,EAAO+I,MAAMC,OAAS,KAC/B5F,EAAO2F,MAAQ,iDAFf3F,EAAO2F,MAAQ,oBAIZ/I,EAAO2J,oBACVvG,EAAOuG,kBAAoB,iCAExB3J,EAAO4J,sBACVxG,EAAOwG,oBAAsB,oCAEJ,GAAvB5J,EAAOL,MAAMqJ,SACf5F,EAAOzD,MAAQ,gBAKVyD,GAIIyG,EAAyB,SAAC7J,GACrCE,QAAQC,IAAIH,GACZ,IACIoD,EAAS,GAOb,OANKpD,EAAOwH,MAEAxH,EAAOwH,MAAMsC,MAJf,sCAKR1G,EAAOoE,MAAQ,iBAFfpE,EAAOoE,MAAQ,oBAKVpE,GAGI2G,EAA0B,SAAC/J,GAEtC,IAAIoD,EAAS,GAQb,OAPKpD,EAAOgK,YACV5G,EAAO4G,UAAY,yBAEU,IAA5BhK,EAAOiK,YAAYjB,SACpB5F,EAAO8G,MAAM,oBAGR9G,GAEI+G,EAA6B,SAACnK,GACzCE,QAAQC,IAAIH,GACZ,IACIoD,EAAS,GAUb,OATKpD,EAAOwH,MAEAxH,EAAOwH,MAAMsC,MAJf,sCAKR1G,EAAOoE,MAAQ,iBAFfpE,EAAOoE,MAAQ,oBAIbxH,EAAOoK,iBACThH,EAAOiH,KAAK,mBAGPjH,I,yGCj/CIK,EAAW,uCAAG,WAAO6G,GAAP,iBAAArK,EAAA,6DACrBsK,EAAW,IAAIC,UACVC,OAAO,QAASH,GAFA,SAGRjK,IACdC,KAAK,wBAAyBiK,GAC9BG,MAAK,SAACC,GAEL,OADAzK,QAAQC,IAAIwK,EAAIpK,KAAKA,KAAKqK,MACnBD,EAAIpK,KAAKA,KAAKqK,QAGtBC,OAAM,SAACC,OAVe,cAGrBvK,EAHqB,yBAWlBA,GAXkB,2CAAH,uD,iCCAxB,IAAIqE,EAAyBC,EAAQ,KAEjCC,EAA0BD,EAAQ,KAEtCE,OAAOC,eAAeC,EAAS,aAAc,CAC3CnC,OAAO,IAETmC,EAAQC,aAAU,EAElB,IAAIC,EAAQL,EAAwBD,EAAQ,IAIxCO,GAAW,EAFMR,EAAuBC,EAAQ,MAElBK,SAAuBC,EAAME,cAAc,OAAQ,CACnFC,EAAG,2PACD,aAEJL,EAAQC,QAAUE","file":"static/js/32.e5514176.chunk.js","sourcesContent":["import styled from \"styled-components/macro\";\r\n\r\nexport const MainBox = styled.div`\r\n    height: auto;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    `\r\nexport const InnerBox = styled.div`\r\n    height: auto;\r\n    width: 60%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    /* background-color: lightgray; */\r\n    padding: 1rem;\r\n`\r\nexport const CommonRow = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 0.5rem;\r\n`\r\nexport const CommonLabel = styled.div`\r\n    width: 100%;\r\n    font-size: 1rem;\r\n    font-weight: 700;\r\n    display: flex;\r\n    margin-bottom: 0.3rem;\r\n    justify-content: left;\r\n`\r\nexport const CommonBox = styled.div`\r\n    width: 100%;\r\n    font-size: 0.8rem;\r\n    font-weight: 700;\r\n    display: flex;\r\n    flex-direction: column;\r\n    /* justify-content: left; */\r\n`\r\nexport const InputArea = styled.textarea`\r\n    height: auto;\r\n    width: 100%;\r\n    text-align: left;\r\n    font: 400 15px/23px Nunito;\r\n    letter-spacing: 0px;\r\n    color: #656565;\r\n    background-color: #FFFFFF;\r\n    border: 1px solid #BBBBBB;\r\n    border-radius: 5px;\r\n    opacity: 1;\r\n    padding: 10px;\r\n    font-size: 0.9rem;\r\n    outline: none;\r\n`\r\nexport const ButtonBox = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-top: 1rem;\r\n`\r\nexport const SubmitButton = styled.button`\r\n    border: none;\r\n    outline: none;\r\n    background-color: #0294b3;\r\n    color: white;\r\n    border-radius: 5px;\r\n    padding: 0.3rem 1.2rem;\r\n    font-size: 1rem;\r\n`\r\nexport const UploadRow = styled.div`\r\n    width: 70%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\nexport const UploadCommon = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n`","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport classNames from \"classnames\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport KErrorMessage from \"./KErrorMessage\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport axios from \"../../axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { get, isEmpty } from \"lodash\";\r\nimport WallpaperIcon from \"@material-ui/icons/Wallpaper\";\r\nimport { uploadImage } from \"../../utils/Functions\";\r\nimport RSelect from \"react-select\";\r\nimport Input from \"../../components/Input\";\r\n// import './AddEditCategory.css'\r\nimport { testValidator } from \"../../utils/validators\";\r\nimport {\r\n  MainBox,\r\n  InnerBox,\r\n  CommonRow,\r\n  CommonLabel,\r\n  CommonBox,\r\n  InputArea,\r\n  ButtonBox,\r\n  SubmitButton,\r\n  UploadRow,\r\n  UploadCommon,\r\n} from \"./TestElement\";\r\nimport \"./testimonial.css\";\r\nimport Overlay from \"../../components/Overlay\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexWrap: \"wrap\",\r\n    // marginTop: '5rem',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  paperHeading: {\r\n    padding: \"1rem 0rem\",\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  textMiddle: {\r\n    verticalAlign: \"middle !important\",\r\n  },\r\n  iconMargin: {\r\n    margin: \"0.5rem\",\r\n    color: \"#696969\",\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  iconcolor: {\r\n    margin: \"0.5rem\",\r\n    color: \"#fff\",\r\n    backgroundColor: \"#0294b3 !important\",\r\n  },\r\n  headingButton: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    padding: \"10px\",\r\n  },\r\n  headingAlignment: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    // padding: \"0 2rem 0 2rem\"\r\n    alignItems: \"center\",\r\n    flexWrap: \"wrap\",\r\n    [\"@media (max-width:780px)\"]: {\r\n      // eslint-disable-line no-useless-computed-key\r\n      flexDirection: \"column\",\r\n      width: \"100%\",\r\n      gap: \"1rem\",\r\n      justifyContent: \"center\",\r\n      textAlign: \"center\",\r\n    },\r\n  },\r\n  addNewCategory: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    flexWrap: \"wrap\",\r\n    [\"@media (max-width:780px)\"]: {\r\n      // eslint-disable-line no-useless-computed-key\r\n      flexDirection: \"column\",\r\n      width: \"100%\",\r\n      gap: \"1rem\",\r\n      justifyContent: \"center\",\r\n      textAlign: \"center\",\r\n    },\r\n  },\r\n  addNewCategoryHeading: {\r\n    textAlign: \"center\",\r\n    flex: 1,\r\n    paddingBottom: \"0 !important\",\r\n    [\"@media (max-width:780px)\"]: {\r\n      // eslint-disable-line no-useless-computed-key\r\n      flexDirection: \"column\",\r\n      width: \"100%\",\r\n      gap: \"1rem\",\r\n      justifyContent: \"center\",\r\n      textAlign: \"center\",\r\n    },\r\n  },\r\n  MarginControl: {\r\n    [\"@media (max-width:780px)\"]: {\r\n      // eslint-disable-line no-useless-computed-key\r\n      margin: \"0 !important\",\r\n    },\r\n  },\r\n  Marginbutton: {\r\n    margin: \"0.5rem\",\r\n  },\r\n  container: {\r\n    maxHeight: \"58vh\",\r\n  },\r\n  paperPaddingRightLeft: {\r\n    padding: \"0rem 1rem\",\r\n  },\r\n}));\r\n\r\nconst AddEdit_Press = (props) => {\r\n  const classes = useStyles();\r\n\r\n  //  data from previous page\r\n\r\n  const {\r\n    location: { state },\r\n  } = props;\r\n\r\n  const fileRef = useRef(null);\r\n  const [profileImagepath, setProfileImagepath] = useState(\r\n    get(state, \"image\", \"\")\r\n  );\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [pressValues, setPressValues] = useState({\r\n    clientName: get(state, \"clientName\", \"\"),\r\n    image: get(state, \"image\", \"\"),\r\n    description: get(state, \"description\", \"\"),\r\n    location: get(state, \"location\", \"\"),\r\n    _id: get(state, \"_id\", \"\"),\r\n  });\r\n  const SubmitTest = async (values) => {\r\n    console.log(values);\r\n    setIsLoading(true);\r\n    let pressData = {\r\n      clientName: values.clientName,\r\n      image: values.image,\r\n      description: values.description,\r\n      location: values.location,\r\n      _id: values._id,\r\n    };\r\n    if (values._id) {\r\n      try {\r\n        const { data } = await axios.post(\r\n          \"/admin/updateTestimonial\",\r\n          pressData\r\n        );\r\n        console.log(data);\r\n        toast.success(data.message, {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n        setIsLoading(false);\r\n        props.history.push(\"/testimonial-management\");\r\n      } catch (error) {\r\n        setIsLoading(false);\r\n        toast.error(`${error.data.data.message}`, {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n      }\r\n    } else {\r\n      try {\r\n        const { data } = await axios.post(\"/admin/createTestimonial\", {\r\n          clientName: values.clientName,\r\n          image: values.image,\r\n          description: values.description,\r\n          location: values.location,\r\n        });\r\n        console.log(data);\r\n        toast.success(data.message, {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n        props.history.push(\"/testimonial-management\");\r\n      } catch (error) {\r\n        toast.error(`${error.data.data.message}`, {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n        <div className={classes.root}>\r\n          <Paper>\r\n            <div className={classes.paperPaddingRightLeft}>\r\n              <div className=\"py-4\">\r\n                <Paper\r\n                  elevation={0}\r\n                  className={classNames(\r\n                    classes.paperHeading,\r\n                    classes.addNewCategory\r\n                  )}\r\n                >\r\n                  <div className={classes.headingSellerDetails}>\r\n                    <Button\r\n                      variant=\"outlined\"\r\n                      aria-label=\"add\"\r\n                      className={classes.iconMargin}\r\n                      onClick={() => {\r\n                        if (window.confirm(\"Leave without saving changes?\")) {\r\n                          props.history.push({\r\n                            pathname: \"/testimonial-management\",\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <ArrowBackIcon />\r\n                    </Button>\r\n                  </div>\r\n                  <div className={classNames(classes.addNewCategoryHeading)}>\r\n                    {\" \"}\r\n                    <h3\r\n                      className={classNames(classes.MarginControl)}\r\n                      style={{ marginBottom: \"-0.5rem\", marginLeft: \"-135px\" }}\r\n                    >\r\n                      {console.log(state)}\r\n                      {!state ? `Add New Testimonial` : `Edit Testimonial`}\r\n                    </h3>\r\n                  </div>\r\n                </Paper>\r\n                <Formik\r\n                  enableReinitialize\r\n                  initialValues={pressValues}\r\n                  validate={(vals) => testValidator(vals)}\r\n                  validateOnChange\r\n                  onSubmit={SubmitTest}\r\n                >\r\n                  {(formikBag) => {\r\n                    return (\r\n                      <Form className={classes.formStyleOnly}>\r\n                        <MainBox>\r\n                          <InnerBox>\r\n                            <CommonRow>\r\n                              <CommonLabel>Client Name:</CommonLabel>\r\n                              <CommonBox>\r\n                                {/* <Input type=\"text\" className=\"form-control\" placeholder=\"Title\" /> */}\r\n                                <Field name=\"clientName\">\r\n                                  {({ field }) => (\r\n                                    <Input\r\n                                      {...field}\r\n                                      type=\"text\"\r\n                                      value={formikBag.values.clientName}\r\n                                      onChange={(e) => {\r\n                                        formikBag.setFieldValue(\r\n                                          \"clientName\",\r\n                                          e.target.value\r\n                                        );\r\n                                      }}\r\n                                      error={\r\n                                        formikBag.touched.clientName &&\r\n                                        formikBag.errors.clientName\r\n                                          ? formikBag.errors.clientName\r\n                                          : null\r\n                                      }\r\n                                      className=\"form-control\"\r\n                                      placeholder=\"Client Name\"\r\n                                    />\r\n                                  )}\r\n                                </Field>\r\n                              </CommonBox>\r\n                            </CommonRow>\r\n                            <CommonRow>\r\n                              <UploadRow>\r\n                                <UploadCommon>\r\n                                  <CommonLabel>Image :</CommonLabel>\r\n                                </UploadCommon>\r\n                                <UploadCommon className=\"col-4\">\r\n                                  <input\r\n                                    ref={fileRef}\r\n                                    name=\"file1\"\r\n                                    hidden\r\n                                    type=\"file\"\r\n                                    accept=\"image/png, image/jpeg , image/jpg\"\r\n                                    onChange={async (e) => {\r\n                                      // let data = await handleImageUpload(\r\n                                      //   e.target.files[0]\r\n                                      let data = await uploadImage(\r\n                                        e.target.files[0]\r\n                                      );\r\n                                      // console.log(data);\r\n                                      // console.log(e.target.files[0]);\r\n                                      console.log(data);\r\n                                      formikBag.setFieldValue(\"image\", data);\r\n                                      setProfileImagepath(data);\r\n                                    }}\r\n                                  />\r\n                                  <SubmitButton\r\n                                    type=\"button\"\r\n                                    onClick={() => {\r\n                                      fileRef.current.click();\r\n                                    }}\r\n                                  >\r\n                                    Upload\r\n                                  </SubmitButton>\r\n                                </UploadCommon>\r\n                                <UploadCommon>\r\n                                  {profileImagepath === \"\" && (\r\n                                    <WallpaperIcon\r\n                                      style={{\r\n                                        height: \"100px\",\r\n                                        width: \"100px\",\r\n                                        objectFit: \"cover\",\r\n                                        borderRadius: \"5px\",\r\n                                      }}\r\n                                    />\r\n                                  )}\r\n                                  {profileImagepath !== \"\" && (\r\n                                    <img\r\n                                      src={profileImagepath}\r\n                                      alt=\"...\"\r\n                                      style={{\r\n                                        width: \"100px\",\r\n                                        height: \"100px\",\r\n                                        objectFit: \"cover\",\r\n                                        borderRadius: \"5px\",\r\n                                      }}\r\n                                    />\r\n                                  )}\r\n                                </UploadCommon>\r\n                              </UploadRow>\r\n                              <CommonBox>\r\n                                {formikBag.errors.image &&\r\n                                formikBag.touched.image ? (\r\n                                  <p\r\n                                    style={{\r\n                                      paddingTop: 5,\r\n                                      fontSize: 13,\r\n                                      color: \"red\",\r\n                                    }}\r\n                                  >\r\n                                    {formikBag.errors.image}\r\n                                  </p>\r\n                                ) : null}\r\n                              </CommonBox>\r\n                            </CommonRow>\r\n                            <CommonRow>\r\n                              <CommonLabel>\r\n                                Description (\r\n                                <spans\r\n                                  style={{\r\n                                    fontSize: \"0.8rem\",\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                  }}\r\n                                >\r\n                                  Max 500 Characters\r\n                                </spans>\r\n                                ):\r\n                              </CommonLabel>\r\n                              <CommonBox>\r\n                                <Field name=\"description\">\r\n                                  {({ field }) => (\r\n                                    <InputArea\r\n                                      {...field}\r\n                                      type=\"text\"\r\n                                      value={formikBag.values.description}\r\n                                      onChange={(e) => {\r\n                                        formikBag.setFieldValue(\r\n                                          \"description\",\r\n                                          e.target.value\r\n                                        );\r\n                                      }}\r\n                                      error={\r\n                                        formikBag.touched.description &&\r\n                                        formikBag.errors.description\r\n                                          ? formikBag.errors.description\r\n                                          : null\r\n                                      }\r\n                                      className=\"form-control\"\r\n                                      placeholder=\"Description\"\r\n                                    />\r\n                                  )}\r\n                                </Field>\r\n                                {formikBag.errors.description &&\r\n                                formikBag.touched.description ? (\r\n                                  <p\r\n                                    style={{\r\n                                      paddingTop: 5,\r\n                                      fontSize: 13,\r\n                                      color: \"red\",\r\n                                    }}\r\n                                  >\r\n                                    {formikBag.errors.description}\r\n                                  </p>\r\n                                ) : null}\r\n                              </CommonBox>\r\n                            </CommonRow>\r\n                            <CommonRow>\r\n                              <CommonLabel>Location:</CommonLabel>\r\n                              <CommonBox>\r\n                                {/* <Input type=\"text\" className=\"form-control\" placeholder=\"Optional\" /> */}\r\n                                <Field name=\"location\">\r\n                                  {({ field }) => (\r\n                                    <Input\r\n                                      {...field}\r\n                                      type=\"text\"\r\n                                      value={formikBag.values.location}\r\n                                      onChange={(e) => {\r\n                                        formikBag.setFieldValue(\r\n                                          \"location\",\r\n                                          e.target.value\r\n                                        );\r\n                                      }}\r\n                                      error={\r\n                                        formikBag.touched.location &&\r\n                                        formikBag.errors.location\r\n                                          ? formikBag.errors.location\r\n                                          : null\r\n                                      }\r\n                                      className=\"form-control\"\r\n                                      placeholder=\"Location\"\r\n                                    />\r\n                                  )}\r\n                                </Field>\r\n                              </CommonBox>\r\n                            </CommonRow>\r\n                            <ButtonBox>\r\n                              <SubmitButton type=\"submit\">Save</SubmitButton>\r\n                            </ButtonBox>\r\n                          </InnerBox>\r\n                        </MainBox>\r\n                      </Form>\r\n                    );\r\n                  }}\r\n                </Formik>\r\n              </div>\r\n            </div>\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n      {isLoading && <Overlay />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddEdit_Press;\r\n","import React from \"react\";\r\nimport styled, { keyframes, withTheme } from \"styled-components\";\r\n\r\n\r\nconst OverWrapper = styled.div(\r\n  props => `\r\n    display: flex;\r\n    flex-direction: ${props.direction || \"column\"};\r\n    justify-content: ${props.justifyContent || \"flex-start\"};\r\n    align-items: ${props.alignItems || \"flex-start\"};\r\n    position:${props.position ? props.position : \"fixed\"} ;\r\n    width: 100%;\r\n    height: ${props.viewheight ? props.viewheight : \"fixed\"};\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color:${props.backgroundColor || \"rgba(0, 0, 0, 0.5)\"};\r\n    z-index: 9999;\r\n    cursor: pointer;\r\n`\r\n);\r\nconst spin = keyframes`\r\n0% { transform: rotate(0deg) }\r\n100% {transform: rotate(360deg) }\r\n`;\r\nconst Circle = styled.div`\r\n  border: 3px solid ${props => props.theme.primary};\r\n  border-top: 3px solid #fff;\r\n  border-radius: 50%;\r\n  margin: auto;\r\n  width: 60px;\r\n  height: 60px;\r\n  animation: ${spin} 0.6s linear infinite;\r\n  transition: 0.2s;\r\n`;\r\n\r\nfunction Overlay(props) {\r\n  const { position, direction, backgroundColor, viewheight } = props;\r\n  return (\r\n    <OverWrapper\r\n      position={position}\r\n      direction={direction}\r\n      backgroundColor={backgroundColor}\r\n      viewheight={viewheight}\r\n    >\r\n      <Circle />\r\n    </OverWrapper>\r\n  );\r\n}\r\n\r\nexport default Overlay;\r\n","import React from \"react\";\r\n\r\nexport default function Input(props) {\r\n  const { error } = props;\r\n  return (\r\n    <>\r\n      <input {...props} className=\"form-control\" style={{color: \"black\"}} />\r\n      {error ? (\r\n        <p style={{ paddingTop: 5, fontSize: 13, color: \"red\" }}>{error}</p>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');\n\nexports.default = _default;","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  var elevations = {};\n  theme.shadows.forEach(function (shadow, index) {\n    elevations[\"elevation\".concat(index)] = {\n      boxShadow: shadow\n    };\n  });\n  return _extends({\n    /* Styles applied to the root element. */\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create('box-shadow')\n    },\n\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      border: \"1px solid \".concat(theme.palette.divider)\n    }\n  }, elevations);\n};\nvar Paper = /*#__PURE__*/React.forwardRef(function Paper(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$square = props.square,\n      square = _props$square === void 0 ? false : _props$square,\n      _props$elevation = props.elevation,\n      elevation = _props$elevation === void 0 ? 1 : _props$elevation,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'elevation' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"square\", \"elevation\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant === 'outlined' ? classes.outlined : classes[\"elevation\".concat(elevation)], !square && classes.rounded),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Paper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\r\n   * Shadow depth, corresponds to `dp` in the spec.\r\n   * It accepts values between 0 and 24 inclusive.\r\n   */\n  elevation: chainPropTypes(PropTypes.number, function (props) {\n    var classes = props.classes,\n        elevation = props.elevation; // in case `withStyles` fails to inject we don't need this warning\n\n    if (classes === undefined) {\n      return null;\n    }\n\n    if (elevation != null && classes[\"elevation\".concat(elevation)] === undefined) {\n      return new Error(\"Material-UI: This elevation `\".concat(elevation, \"` is not implemented.\"));\n    }\n\n    return null;\n  }),\n\n  /**\r\n   * If `true`, rounded corners are disabled.\r\n   */\n  square: PropTypes.bool,\n\n  /**\r\n   * The variant to use.\r\n   */\n  variant: PropTypes.oneOf(['elevation', 'outlined'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiPaper'\n})(Paper);","const messages = {\r\n  invalid: \"Field is required.\",\r\n  email: \"Enter a valid email address.\",\r\n  password:\r\n    \"It should contain 7 to 15 characters which contain at least one numeric digit and a special character and one uppercase no whitespace.\",\r\n  passwordMatch: \"Password does not match.\",\r\n  // invalid: \"Given data is invalid.\"\r\n};\r\n\r\n//global regex\r\nconst noHtmlRegex = /<\\/?[^>]+(>|$)/g;\r\nconst onlyAlphbetRegex = /^[a-zA-Z ]*$/;\r\nconst phoneRegex = /^([4-9])(\\d{9})$/;\r\n\r\nconst checkEmail = (value) => {\r\n  if (\r\n    !/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n      value\r\n    )\r\n  ) {\r\n    return true;\r\n  } else if (value.includes('\"') || value.includes(\"'\") || value.includes(\",\") || value.includes(\" \")) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n// const emal\r\n\r\nexport const loginValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"Password is required.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const bannerValidator = (values, bannerImage) => {\r\n  let errors = {};\r\n  if (!bannerImage) {\r\n    alert(\"Select a Banner Image\");\r\n  }\r\n\r\n  return errors;\r\n};\r\nexport const cuisineValidator = (values, bannerImage) => {\r\n  let errors = {};\r\n  if (!values.title) {\r\n    errors.title = \"Please enter title\";\r\n  }\r\n\r\n  if (!values.image) {\r\n    errors.image = \"Please upload cuisine image\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const forgotPasswordValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Enter a valid email address.\";\r\n  }\r\n  console.log(errors);\r\n  return errors;\r\n};\r\n\r\nexport const resetValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.password) {\r\n    errors.password = \"Password is required.\";\r\n  } else if (!/^(?=.*[0-9])(?=.*[!@#$%^&*-])(?=.*[A-Z])(?=.*[a-z])[a-zA-Z0-9!@#$%^&*-]{7,15}$/.test(values.password)) {\r\n    errors.password =\r\n      \"It should contain 7 to 15 characters which contain at least one numeric digit and a special character and one uppercase no whitespace.\";\r\n  }\r\n\r\n  if (!values.confirm_password) {\r\n    errors.confirm_password = \"Confirm Password is required.\";\r\n  } else if (values.password !== values.confirm_password) {\r\n    errors.confirm_password = \"Password does not Match.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const changePasswordValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.current_password) {\r\n    errors.current_password = \"Current Password is required.\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"New Password is required.\";\r\n  } else if (!/^(?=.*[0-9])(?=.*[!@#$%^&*-])(?=.*[A-Z])(?=.*[a-z])[a-zA-Z0-9!@#$%^&*-]{7,15}$/.test(values.password)) {\r\n    errors.password =\r\n      \"It should contain 7 to 15 characters which contain at least one numeric digit and a special character and one uppercase no whitespace.\";\r\n  }\r\n\r\n  if (!values.confirm_password) {\r\n    errors.confirm_password = \"Confirm password is required.\";\r\n  } else if (values.password !== values.confirm_password) {\r\n    errors.confirm_password = \"Password does not Match.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const employeeValidator = (values) => {\r\n  let errors = {};\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Employee name is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n  let emailval = String(values.email).toLowerCase();\r\n  if (!values.email) {\r\n    errors.email = \"Employee email is required.\";\r\n  } else if (noHtmlRegex.test(values.email)) {\r\n    errors.email = messages.invalid;\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = messages.invalid;\r\n  } else if (!/(.*)@singleinterface\\.com/.test(emailval)) {\r\n    errors.email = \"Only singleinterface email id need to be enter.\";\r\n  }\r\n\r\n  if (!values.phone) {\r\n    errors.phone = \"Employee phone number is required.\";\r\n  } else if (noHtmlRegex.test(values.phone)) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!phoneRegex.test(values.phone)) {\r\n    errors.phone = \"Phone no is Invalid.\";\r\n  }\r\n\r\n  if (!values.department) {\r\n    errors.department = \"Employee department is required.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const orderValidator = (values, activeStep) => {\r\n  let errors = {};\r\n\r\n  //step 1\r\n  if (activeStep === 1) {\r\n    if (!values.business_name) {\r\n      errors.business_name = \"Business name is required.\";\r\n    } else if (noHtmlRegex.test(values.business_name)) {\r\n      errors.business_name = messages.invalid;\r\n    }\r\n\r\n    if (!values.contact_person_name) {\r\n      errors.contact_person_name = \"Contact person name is required.\";\r\n    } else if (noHtmlRegex.test(values.contact_person_name)) {\r\n      errors.contact_person_name = messages.invalid;\r\n    }\r\n    if (!values.company_email) {\r\n      errors.company_email = \"Company email is required.\";\r\n    } else if (checkEmail(values.company_email)) {\r\n      errors.company_email = \"Company Email is not valid.\";\r\n    } else if (noHtmlRegex.test(values.company_email)) {\r\n      errors.company_email = messages.invalid;\r\n    }\r\n\r\n    if (!values.website) {\r\n      errors.website = \"Website name is required.\";\r\n    } else if (\r\n      /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/.test(\r\n        values.website\r\n      ) !== true\r\n    ) {\r\n      errors.website = \"Invalid website name.\";\r\n    }\r\n\r\n    if (!values.phone) {\r\n      errors.phone = \"Phone number is required.\";\r\n    } else if (noHtmlRegex.test(values.phone)) {\r\n      errors.phone = messages.invalid;\r\n    } else if (!/^([4-9])(\\d{9})$/.test(values.phone)) {\r\n      errors.phone = \"Phone no is Invalid.\";\r\n    }\r\n  }\r\n  //step 2\r\n  if (activeStep === 2) {\r\n    if (!values.pincode) {\r\n      errors.pincode = \"Pincode is required.\";\r\n    } else if (noHtmlRegex.test(values.pincode)) {\r\n      errors.pincode = messages.invalid;\r\n    }\r\n    if (!values.address) {\r\n      errors.address = \"Address is required.\";\r\n    } else if (noHtmlRegex.test(values.address)) {\r\n      errors.address = messages.invalid;\r\n    }\r\n  }\r\n\r\n  if (activeStep === 3) {\r\n    if (values[\"employee_id\"] == undefined || values.employee_id.length === 0) {\r\n      errors.employee_id = \"Please select an employee.\";\r\n    } else if (values.employee_id.length > 10) {\r\n      errors.employee_id = \"You may select max 10 person only.\";\r\n    }\r\n  }\r\n  if (activeStep === 4) {\r\n    if (!values.locations) {\r\n      errors.locations = \"Locations are required.\";\r\n    } else if (/^[0-9]*$/g.test(values.locations) !== true) {\r\n      errors.locations = messages.invalid;\r\n    } else if (values.locations < 1) {\r\n      errors.locations = messages.invalid;\r\n    } else if (values.locations > 100000) {\r\n      errors.locations = \"Please enter location less than 100000\";\r\n    }\r\n\r\n    if (!values.order_code) {\r\n      errors.order_code = \"Order Code required.\";\r\n    } else if (!/^.{5,6}$/.test(values.order_code)) {\r\n      errors.order_code = \"Minimum 5 character or max 6 character required.\";\r\n    } else if (noHtmlRegex.test(values.order_code)) {\r\n      errors.order_code = messages.invalid;\r\n    }\r\n\r\n    if (!values.subscription_start_date) {\r\n      errors.subscription_start_date = \"Please Select Date Properly.\";\r\n    }\r\n    if (!values.subscription_end_date) {\r\n      errors.subscription_start_date = \"Please Select Date Properly.\";\r\n    }\r\n\r\n    if (values.subscription_end_date < values.subscription_start_date) {\r\n      errors.subscription_start_date = \"Start date can’t be greater than end date.\";\r\n    }\r\n    if (values.gmb_multi_acc_allowed) {\r\n      if (!values.gmb_email_address) {\r\n        errors.gmb_email_address = \"GMB email is required.\";\r\n      } else if (checkEmail(values.gmb_email_address)) {\r\n        errors.gmb_email_address = \"GMB Email is not valid.\";\r\n      } else if (noHtmlRegex.test(values.gmb_email_address)) {\r\n        errors.gmb_email_address = messages.invalid;\r\n      }\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const permissionValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n  if (!values.menu_id) {\r\n    errors.menu_id = \"Menu is required.\";\r\n  } else if (noHtmlRegex.test(values.menu_id)) {\r\n    errors.menu_id = messages.invalid;\r\n  }\r\n  if (!values.action) {\r\n    errors.action = \"Action is required.\";\r\n  } else if (noHtmlRegex.test(values.action)) {\r\n    errors.action = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.prefix)) {\r\n    errors.prefix = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.plugin)) {\r\n    errors.plugin = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.description)) {\r\n    errors.description = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const menuValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n  if (!values.controller) {\r\n    errors.controller = \"Controller is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.controller = messages.invalid;\r\n  }\r\n\r\n  if (noHtmlRegex.test(values.span)) {\r\n    errors.span = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.inline_style)) {\r\n    errors.inline_style = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.description)) {\r\n    errors.description = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const countryValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (values.name.length > 30) {\r\n    errors.name = messages.invalid;\r\n  } else if (values.name.includes(\"  \")) {\r\n    errors.name = \"Please remove extra whitespace.\";\r\n  } else if (!onlyAlphbetRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!onlyAlphbetRegex.test(values.alias)) {\r\n    errors.alias = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const cityValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (values.name.length > 30) {\r\n    errors.name = messages.invalid;\r\n  } else if (!onlyAlphbetRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n  if (!values.state_id) {\r\n    errors.state_id = \"State is required.\";\r\n  } else if (noHtmlRegex.test(values.state_id)) {\r\n    errors.state_id = messages.invalid;\r\n  }\r\n\r\n  if (!values.country_id) {\r\n    errors.country_id = \"Country is required.\";\r\n  } else if (noHtmlRegex.test(values.country_id)) {\r\n    errors.country_id = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const stateValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (values.name.length > 30) {\r\n    errors.name = messages.invalid;\r\n  } else if (!onlyAlphbetRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (values.state_code.length > 30) {\r\n    errors.state_code = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.state_code)) {\r\n    errors.state_code = messages.invalid;\r\n  }\r\n\r\n  if (!values.country_id) {\r\n    errors.country_id = \"Country is required.\";\r\n  } else if (noHtmlRegex.test(values.country_id)) {\r\n    errors.country_id = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\nexport const localityValidtor = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!values.pin_code) {\r\n    errors.pin_code = \"Pincode is required.\";\r\n  } else if (!/^[1-9][0-9]{5}$/.test(values.pin_code)) {\r\n    errors.pin_code = \"Invalid Pincode\";\r\n  } else if (noHtmlRegex.test(values.pin_code)) {\r\n    errors.pin_code = messages.invalid;\r\n  }\r\n  if (!values.city_id) {\r\n    errors.city_id = \"City is required.\";\r\n  } else if (noHtmlRegex.test(values.city_id)) {\r\n    errors.city_id = messages.invalid;\r\n  }\r\n  if (!values.state_id) {\r\n    errors.state_id = \"State is required.\";\r\n  } else if (noHtmlRegex.test(values.state_id)) {\r\n    errors.state_id = messages.invalid;\r\n  }\r\n\r\n  if (!values.country_id) {\r\n    errors.country_id = \"Country is required.\";\r\n  } else if (noHtmlRegex.test(values.country_id)) {\r\n    errors.country_id = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const campaignValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.campaign_name) {\r\n    errors.campaign_name = \"Campaign name is required.\";\r\n  } else if (values.campaign_name.includes(\"  \")) {\r\n    errors.campaign_name = \"Please remove extra whitespace.\";\r\n  } else if (noHtmlRegex.test(values.campaign_name)) {\r\n    errors.campaign_name = messages.invalid;\r\n  }\r\n\r\n  if (values.template_id !== null ? values.template_id.length === 0 : true) {\r\n    errors.template_id = \"Template is required.\";\r\n  }\r\n  if (values.campaign_type !== null ? values.campaign_type.length === 0 : true) {\r\n    errors.campaign_type = \"Campaign Type is required.\";\r\n  }\r\n\r\n  if (values.location_id !== null ? values.location_id.length === 0 : true) {\r\n    errors.location_id = \"Location is required.\";\r\n  }\r\n\r\n  if (!values.start_date) {\r\n    errors.start_date = \"Please Select Date Properly.\";\r\n  }\r\n  if (!values.end_date) {\r\n    errors.end_date = \"Please Select Date Properly.\";\r\n  }\r\n\r\n  if (values.end_date < values.end_date) {\r\n    errors.start_date = \"Start date can’t be greater than end date.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const roleValidator = (values, data) => {\r\n  let errors = {};\r\n\r\n  // if (data.length === 0) {\r\n  //   errors.permission = true;\r\n  // }\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (values.name.length > 100) {\r\n    errors.name = \"Name should not be greater than 100.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const userValidator = (values, superAdminSelected, roleDefaultVal) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.nick_name)) {\r\n    errors.nick_name = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.department)) {\r\n    errors.department = messages.invalid;\r\n  }\r\n\r\n  if (noHtmlRegex.test(values.department)) {\r\n    errors.job_title = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    errors.phone = \"Phone no is required.\";\r\n  } else if (!phoneRegex.test(values.phone) && values.phone) {\r\n    errors.phone = \"Phone no is Invalid.\";\r\n  }\r\n\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid.\";\r\n  } else if (noHtmlRegex.test(values.company_email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!roleDefaultVal) {\r\n    errors.role = \"Role is required.\";\r\n  }\r\n  if (!superAdminSelected) {\r\n    if (values.location_id !== null ? values.location_id.length === 0 : true) {\r\n      errors.location_id = \"Location is required.\";\r\n    } else if (noHtmlRegex.test(values.location_id)) {\r\n      errors.location_id = messages.invalid;\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const contactValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Please enter contact name.\";\r\n  } else if (values.name.includes(\"  \")) {\r\n    errors.name = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!values.email) {\r\n    if (!values.phone) {\r\n      errors.email = \"Email is required.\";\r\n    }\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid.\";\r\n  } else if (noHtmlRegex.test(values.company_email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    if (!values.email) {\r\n      errors.phone = \"Please enter contact phone number.\";\r\n    }\r\n  } else if (noHtmlRegex.test(values.phone) && values.phone) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!/^([4-9])(\\d{9})$/.test(values.phone) && values.phone) {\r\n    errors.phone = \"Enter a valid phone no.\";\r\n  }\r\n\r\n  if (values.location_id === null) {\r\n    errors.location_id = \"Please select contact location.\";\r\n  }\r\n\r\n  if (values.group !== null ? values.group.length === 0 : true) {\r\n    if (values.campaign_id === null) {\r\n      errors.campaign_id = \"Please select a camgpaign if you are not selecting a group.\";\r\n    }\r\n  }\r\n  if (values.campaign_id === null) {\r\n    if (values.group !== null ? values.group.length === 0 : true) {\r\n      errors.group = \"Please select at-least one group if you are not selecting a campaign.\";\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const qrContactValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Please enter contact name.\";\r\n  } else if (values.name.includes(\"  \")) {\r\n    errors.name = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid.\";\r\n  } else if (noHtmlRegex.test(values.company_email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    errors.phone = \"Please enter contact phone number.\";\r\n  } else if (noHtmlRegex.test(values.phone) && values.phone) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!/^([4-9])(\\d{9})$/.test(values.phone) && values.phone) {\r\n    errors.phone = \"Enter a valid phone no.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const assignCampaignvalidator = (values) => {\r\n  let errors = {};\r\n  console.log(values.location_id);\r\n  if (values.location_id === null) {\r\n    errors.location_id = \"Please select  location.\";\r\n  }\r\n  if (values.campaign.length === 0) {\r\n    errors.campaign = \"Please select at least one campaign to assign.\";\r\n  }\r\n  if (values.location_id !== null) {\r\n    if (values.group.length === 0) {\r\n      errors.group = \"Please select at least one group.\";\r\n    }\r\n  }\r\n  console.log(errors);\r\n\r\n  return errors;\r\n};\r\n\r\nexport const editValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Please enter contact name.\";\r\n  } else if (values.name.includes(\"  \")) {\r\n    errors.name = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!values.email) {\r\n    if (!values.phone) {\r\n      errors.email = \"Email is required.\";\r\n    }\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid\";\r\n  } else if (noHtmlRegex.test(values.company_email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    if (!values.email) {\r\n      errors.phone = \"Please enter contact phone number.\";\r\n    }\r\n  } else if (noHtmlRegex.test(values.phone) && values.phone) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!/^([4-9])(\\d{9})$/.test(values.phone) && values.phone) {\r\n    errors.phone = \"Phone no is Invalid.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const bulkContactValidator = (values, groupVal) => {\r\n  let errors = {};\r\n  var extension = \"\";\r\n  if (values.file) {\r\n    extension = values.file.name.slice(values.file.name.lastIndexOf(\".\"), values.file.name.length);\r\n  }\r\n  if (!values.file) {\r\n    errors.file = \"Please select a file.\";\r\n  } else if (extension !== \".xls\" && extension !== \".csv\" && extension !== \".xlsx\") {\r\n    errors.file = \"Given file format is invalid.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const bulkUserValidator = (values) => {\r\n  let errors = {};\r\n  let extension = \"\";\r\n  if (values.file) {\r\n    extension = values.file.name.slice(values.file.name.lastIndexOf(\".\"), values.file.name.length);\r\n  }\r\n\r\n  if (!values.file) {\r\n    errors.file = \"Please select a file.\";\r\n  } else if (extension !== \".xls\" && extension !== \".csv\" && extension !== \".xlsx\") {\r\n    errors.file = \"Given file format is invalid.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const responseValitor = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Response title is required.\";\r\n  }\r\n  if (!values.description) {\r\n    errors.description = \"Description is required.\";\r\n  }\r\n  if (!values.content) {\r\n    errors.content = \"Content is required.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const assignGroupValidator = (values) => {\r\n  let errors = {};\r\n  if (values.group === null) {\r\n    errors.group = \"Please select at-least one group.\";\r\n  }\r\n\r\n  if (values.group !== null) {\r\n    if (values.group.length === 0) {\r\n      errors.group = \"Please select at-least one group.\";\r\n    } else if (noHtmlRegex.test(values.group)) {\r\n      errors.group = messages.invalid;\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const groupValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Group Name is required.\";\r\n  } else if (values.name.length > 100) {\r\n    errors.name = \"Group Name should not be greater than 100.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  } else if (values.name.includes(\"  \")) {\r\n    errors.name = \"Please remove extra whitespace.\";\r\n  }\r\n\r\n  if (!values.location_id) {\r\n    errors.location_id = \"Select location.\";\r\n  } else if (noHtmlRegex.test(values.location_id)) {\r\n    errors.location_id = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const templateValidator = (values, tmpUrl, pdUrl) => {\r\n  let errors = {};\r\n  if (!values.template_title) {\r\n    errors.template_title = \"Template Name is required.\";\r\n  } else if (values.template_title.includes(\"  \")) {\r\n    errors.template_title = \"Please remove extra whitespace.\";\r\n  } else if (values.template_title.length > 200) {\r\n    errors.template_title = \"Template title should not be greater than 200\";\r\n  } else if (noHtmlRegex.test(values.template_title)) {\r\n    errors.template_title = messages.invalid;\r\n  }\r\n\r\n  if (!values.sms && !values.email) {\r\n    errors.channel_type = \"Please Select atleat one channel type.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const emailValidtor = (values, tmpUrl) => {\r\n  let errors = {};\r\n\r\n  if (!values.email_from_name) {\r\n    errors.email_from_name = \"From name  is  required.\";\r\n  } else if (values.email_from_name.includes(\"  \")) {\r\n    errors.email_from_name = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.from)) {\r\n    errors.email_from_name = messages.invalid;\r\n  }\r\n\r\n  if (!values.email_from_email) {\r\n    errors.email_from_email = \"From email  is  required.\";\r\n  } else if (values.email_from_email.includes(\"  \")) {\r\n    errors.email_from_email = messages.invalid;\r\n  } else if (checkEmail(values.email_from_email)) {\r\n    errors.email_from_email = \"Enter a valid email address.\";\r\n  }\r\n  if (!values.brand_logo && tmpUrl === null) {\r\n    errors.brand_logo = \"Logo image is required.\";\r\n  }\r\n\r\n  if (values.brand_logo !== null ? values.brand_logo.size >= 2000000 : false) {\r\n    errors.brand_logo = \"The brand logo may not be greater than 2048 kilobytes.\";\r\n  }\r\n  if (values.body.replace(/<(.|\\n)*?>/g, \"\").trim().length === 0) {\r\n    errors.body = \"Body content is required.\";\r\n  }\r\n\r\n  if (!values.subject) {\r\n    errors.subject = \"Subject is required.\";\r\n  } else if (values.subject.includes(\"  \")) {\r\n    errors.subject = \"Please remove extra whitespace.\";\r\n  } else if (values.subject.length > 200) {\r\n    errors.subject = \"Email Subject  should not be greater than 200\";\r\n  } else if (noHtmlRegex.test(values.subject)) {\r\n    errors.subject = messages.invalid;\r\n  }\r\n\r\n  if (!values.headline) {\r\n    errors.headline = \"Headline is required.\";\r\n  } else if (values.headline.includes(\"  \")) {\r\n    errors.headline = \"Please remove extra whitespace.\";\r\n  } else if (values.headline.length > 200) {\r\n    errors.headline = \"Headline  should not be greater than 200\";\r\n  } else if (noHtmlRegex.test(values.headline)) {\r\n    errors.headline = messages.invalid;\r\n  }\r\n\r\n  if (!values.button_title) {\r\n    errors.button_title = \"Button Title is required.\";\r\n  } else if (values.button_title.includes(\"  \")) {\r\n    errors.button_title = \"Please remove extra whitespace.\";\r\n  } else if (values.button_title.length > 50) {\r\n    errors.button_title = \"Button Title  should not be greater than 25\";\r\n  } else if (noHtmlRegex.test(values.button_title)) {\r\n    errors.button_title = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const smsValidator = (values) => {\r\n  let errors = {};\r\n  // if (!values.sms_title) {\r\n  //   errors.sms_title = \"SMS title is  required.\";\r\n  // } else if (values.sms_title.includes(\"  \")) {\r\n  //   errors.sms_title = messages.invalid;\r\n  // } else if (noHtmlRegex.test(values.sms_title)) {\r\n  //   errors.sms_title = messages.invalid;\r\n  // }\r\n\r\n  if (!values.content) {\r\n    errors.content = \"Text Message is required.\";\r\n  } else if (noHtmlRegex.test(values.content)) {\r\n    errors.content = messages.invalid;\r\n  } else if (values.content.length > 200) {\r\n    errors.content = \"Text Message may not be greater than 200 characters.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const quickValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid.\";\r\n  } else if (noHtmlRegex.test(values.email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    errors.phone = \"Phone number is required.\";\r\n  } else if (noHtmlRegex.test(values.phone)) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!/^([4-9])(\\d{9})$/.test(values.phone)) {\r\n    errors.phone = \"Phone no is Invalid.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const quickSendValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (noHtmlRegex.test(values.email)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid.\";\r\n  } else if (noHtmlRegex.test(values.email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    errors.phone = \"Phone number is required.\";\r\n  } else if (noHtmlRegex.test(values.phone)) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!phoneRegex.test(values.phone)) {\r\n    errors.phone = \"Phone no is Invalid.\";\r\n  }\r\n\r\n  if (values.outlet_id === null) {\r\n    errors.outlet_id = \"Please select  location.\";\r\n  }\r\n  if (values.template_id !== null) {\r\n    errors.template = \"Template is required.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const QrValidtor = (values, tmpUrl) => {\r\n  let errors = {};\r\n  if (!values.business_name) {\r\n    errors.business_name = \"Business name is required.\";\r\n  } else if (noHtmlRegex.test(values.business_name)) {\r\n    errors.business_name = messages.invalid;\r\n  }\r\n\r\n  if (!values.brand_logo && tmpUrl === null) {\r\n    errors.brand_logo = \"Logo image is required.\";\r\n  }\r\n\r\n  if (values.brand_logo !== null ? values.brand_logo.size >= 2000000 : false) {\r\n    errors.brand_logo = \"The brand logo may not be greater than 2048 kilobytes.\";\r\n  }\r\n\r\n  if (values.outlet_id === null) {\r\n    errors.outlet_id = \"Please select  location.\";\r\n  }\r\n  if (values.template_id !== null ? values.template_id.length === 0 : true) {\r\n    errors.template_id = \"Template is required.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\nexport const goalValidator = (values, tmpUrl) => {\r\n  let errors = {};\r\n  if (!values.type) {\r\n    errors.type = \"Goal type is required.\";\r\n  }\r\n\r\n  if (!values.count) {\r\n    errors.count = \"Count  is required.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const CustomerExperianceValidator = (values, tmpUrl) => {\r\n  let errors = {};\r\n  if (!values.cust_heading) {\r\n    errors.cust_heading = \"Review title required.\";\r\n  } else if (values.cust_heading.length > 200) {\r\n    errors.cust_heading = \"The customer heading may not be greater than 200 characters.\";\r\n  } else if (noHtmlRegex.test(values.cust_heading)) {\r\n    errors.cust_heading = messages.invalid;\r\n  }\r\n\r\n  if (!values.brand_logo && tmpUrl === null) {\r\n    errors.brand_logo = \"Logo image is required.\";\r\n  }\r\n\r\n  if (values.brand_logo !== null ? values.brand_logo.size >= 2000000 : false) {\r\n    errors.brand_logo = \"The brand logo may not be greater than 2048 kilobytes.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const setRuleValidator = (values, completeRule) => {\r\n  let errors = {};\r\n  // if (!values.rule_title) {\r\n  //   errors.rule_title = \"Rule Title is  required.\";\r\n  // }\r\n  if (values.rule_title.includes(\"  \")) {\r\n    errors.rule_title = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.rule_title)) {\r\n    errors.rule_title = messages.invalid;\r\n  }\r\n\r\n  if (!values.starify_review_message) {\r\n    errors.starify_review_message = \"Starify review message is required.\";\r\n  } else if (noHtmlRegex.test(values.starify_review_message)) {\r\n    errors.starify_review_message = messages.invalid;\r\n  }\r\n\r\n  if (!values.button_title) {\r\n    errors.button_title = \"Button Title is required.\";\r\n  } else if (values.button_title.length > 100) {\r\n    errors.button_title = \"Customer button title should not be greater than 100.\";\r\n  } else if (noHtmlRegex.test(values.button_title)) {\r\n    errors.button_title = messages.invalid;\r\n  }\r\n  // if(!completeRule.some(item=> item===1)){\r\n  //   errors.star1 = true;\r\n  // }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const ruleValidator = (fieldName, value, preErrors) => {\r\n  let errors = { ...preErrors };\r\n\r\n  // if (ruleType === \"tags\") {\r\n  //   if (!values.question) {\r\n  //     errors.question = \"Question is required.\";\r\n  //     document.querySelector(\".\" + RuleClass + \" .tagQuestion\").focus();\r\n  //   } else if (noHtmlRegex.test(values.question)) {\r\n  //     document.querySelector(\".\" + RuleClass + \" .tagQuestion\").focus();\r\n  //     errors.question = messages.invalid;\r\n  //   }\r\n  //   if (tags.length === 0) {\r\n  //     errors.tagsInput = \"Tags are required.\";\r\n  //     document.querySelector(\".\" + RuleClass + \" .tagsInput\").focus();\r\n  //   }\r\n  // }\r\n  // if (ruleType === \"question\") {\r\n  //   if (questions.length === 0) {\r\n  //     errors.questionInput = \"Questions are required.\";\r\n  //     document.querySelector(\".\" + RuleClass + \" .questionInput\").focus();\r\n  //   }\r\n  // }\r\n\r\n  // if (!values.thanks_message) {\r\n  //   errors.thanks_message = \"Thanks Message is required.\";\r\n  //   document.querySelector(\".\" + RuleClass + \" .thanks_message\").focus();\r\n  // } else if (noHtmlRegex.test(values.thanks_message)) {\r\n  //   document.querySelector(\".\" + RuleClass + \" .thanks_message\").focus();\r\n  //   errors.thanks_message = messages.invalid;\r\n  // }\r\n\r\n  // if (values.additional_message) {\r\n  //   if (values.additional_message.includes(\"  \")) {\r\n  //     errors.additional_message = messages.invalid;\r\n  //     document.querySelector(\".\" + RuleClass + \" .additional_message\").focus();\r\n  //   } else if (noHtmlRegex.test(values.additional_message)) {\r\n  //     errors.additional_message = messages.invalid;\r\n  //     document.querySelector(\".\" + RuleClass + \" .additional_message\").focus();\r\n  //   } else if (values.additional_message.length > 200) {\r\n  //     errors.additional_message =\r\n  //       \"Additional message title  should not be greater than 200\";\r\n  //     document.querySelector(\".\" + RuleClass + \" .additional_message\").focus();\r\n  //   }\r\n  // }\r\n\r\n  if (fieldName === \"additional_message\") {\r\n    if (!value) {\r\n      errors[fieldName] = \"Thanks message is required.\";\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.includes(\"  \")) {\r\n      errors[fieldName] = messages.invalid;\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (noHtmlRegex.test(value)) {\r\n      errors[fieldName] = messages.invalid;\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.length > 200) {\r\n      errors[fieldName] = \"Thanks message  should not be greater than 200\";\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else {\r\n      errors[fieldName] = null;\r\n    }\r\n  }\r\n  if (fieldName === \"rule_message\") {\r\n    if (!value) {\r\n      errors[fieldName] = \"Review page title is required.\";\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.includes(\"  \")) {\r\n      errors[fieldName] = messages.invalid;\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (noHtmlRegex.test(value)) {\r\n      errors[fieldName] = messages.invalid;\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.length > 200) {\r\n      errors[fieldName] = \"Review page title  should not be greater than 200\";\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else {\r\n      errors[fieldName] = null;\r\n    }\r\n  }\r\n\r\n  if (fieldName === \"thanks_message\") {\r\n    if (!value) {\r\n      errors[fieldName] = \"Thanks message  is required.\";\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.includes(\"  \")) {\r\n      errors[fieldName] = messages.invalid;\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (noHtmlRegex.test(value)) {\r\n      errors[fieldName] = messages.invalid;\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.length > 200) {\r\n      errors[fieldName] = \"Thanks message  should not be greater than 200\";\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else {\r\n      errors[fieldName] = null;\r\n    }\r\n  }\r\n\r\n  if (fieldName === \"question\") {\r\n    if (value ? value.length === 0 : true) {\r\n      errors[fieldName] = \"Question is required.\";\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else {\r\n      errors[fieldName] = null;\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const validateRules = (ruleData, RuleClass) => {\r\n  let errors = {};\r\n\r\n  if (ruleData.rule_type === \"tags\") {\r\n    if (ruleData.question ? ruleData.question.length === 0 : true) {\r\n      errors.question = \"Question is required.\";\r\n      if (RuleClass) {\r\n        document.querySelector(\".\" + RuleClass + \" .tagQuestion\").focus();\r\n      }\r\n    }\r\n    if (ruleData.tags ? ruleData.tags.length === 0 : true) {\r\n      errors.tagsInput = \"Tags are required.\";\r\n      if (RuleClass) {\r\n        document.querySelector(\".\" + RuleClass + \" .tagsInput\").focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (ruleData.rule_type === \"question\") {\r\n    if (ruleData.question ? ruleData.question.length === 0 : true) {\r\n      errors.questionInput = \"Questions are required.\";\r\n      if (RuleClass) {\r\n        document.querySelector(\".\" + RuleClass + \" .questionInput\").focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!ruleData.thanks_message) {\r\n    errors.thanks_message = \"Thanks Message is required.\";\r\n    if (RuleClass) {\r\n      document.querySelector(\".\" + RuleClass + \" .thanks_message\").focus();\r\n    }\r\n  } else if (noHtmlRegex.test(ruleData.thanks_message)) {\r\n    if (RuleClass) {\r\n      document.querySelector(\".\" + RuleClass + \" .thanks_message\").focus();\r\n    }\r\n    errors.thanks_message = messages.invalid;\r\n  }\r\n\r\n  // if (ruleData.additional_message) {\r\n  //   if (ruleData.additional_message.includes(\"  \")) {\r\n  //     errors.additional_message = messages.invalid;\r\n  //     if (RuleClass) {\r\n  //       document\r\n  //         .querySelector(\".\" + RuleClass + \" .additional_message\")\r\n  //         .focus();\r\n  //     }\r\n  //   } else if (noHtmlRegex.test(ruleData.additional_message)) {\r\n  //     errors.additional_message = messages.invalid;\r\n  //     if (RuleClass) {\r\n  //       document\r\n  //         .querySelector(\".\" + RuleClass + \" .additional_message\")\r\n  //         .focus();\r\n  //     }\r\n  //   } else if (ruleData.additional_message.length > 200) {\r\n  //     errors.additional_message =\r\n  //       \"Additional message title  should not be greater than 200\";\r\n  //     if (RuleClass) {\r\n  //       document\r\n  //         .querySelector(\".\" + RuleClass + \" .additional_message\")\r\n  //         .focus();\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // if (!ruleData.rule_message) {\r\n  //   errors.rule_message = \"Review page title is required.\";\r\n  //   if (RuleClass) {\r\n  //     document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n  //   }\r\n  // } else if (ruleData.rule_message) {\r\n  //   if (ruleData.rule_message.includes(\"  \")) {\r\n  //     errors.rule_message = messages.invalid;\r\n  //     if (RuleClass) {\r\n  //       document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n  //     }\r\n  //   } else if (noHtmlRegex.test(ruleData.additional_message)) {\r\n  //     errors.rule_message = messages.invalid;\r\n  //     if (RuleClass) {\r\n  //       document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n  //     }\r\n  //   } else if (ruleData.additional_message.length > 200) {\r\n  //     errors.rule_message = \"Review page title  should not be greater than 200\";\r\n  //     if (RuleClass) {\r\n  //       document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n  //     }\r\n  //   }\r\n  //}\r\n\r\n  return errors;\r\n};\r\n\r\nexport const cloneTemplateValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.template_title) {\r\n    errors.template_title = \"Template Title is  required.\";\r\n  } else if (noHtmlRegex.test(values.template_title)) {\r\n    errors.template_title = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const reviewValidator = (values, ruleValue, noEmail) => {\r\n  let errors = {};\r\n  console.log(values);\r\n  if (ruleValue.tell_us_more) {\r\n    if (!values.tell_us_more) {\r\n      errors.tell_us_more = \"Field is required.\";\r\n    } else if (values.tell_us_more.includes(\"  \")) {\r\n      errors.tell_us_more = messages.invalid;\r\n    } else if (noHtmlRegex.test(values.tell_us_more)) {\r\n      errors.tell_us_more = messages.invalid;\r\n    }\r\n  }\r\n  if (ruleValue.rule_type === \"tags\") {\r\n    if (values.question.length === 0) {\r\n      errors.tags = \"please select atleast one tag.\";\r\n    }\r\n  }\r\n  if (ruleValue.rule_type === \"question\") {\r\n    for (let i = 0; i < ruleValue.question.length; i++) {\r\n      if (!values[\"question\" + i]) {\r\n        errors[\"question\" + i] = \"This Field required.\";\r\n      } else if (values[\"question\" + i].includes(\"  \")) {\r\n        errors[\"question\" + i] = \"Please remove extra whitespace.\";\r\n      }\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const replyValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (!values.reply_comment) {\r\n    errors.reply_comment = \"Please add your Comment First!\";\r\n  }\r\n  if (noHtmlRegex.test(values.reply_comment)) {\r\n    errors.reply_comment = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const ticketValidtor = (values) => {\r\n  let errors = {};\r\n  // if (!values.assigned_to) {\r\n  //   errors.assigned_to = \"Please Select a user to assign\";\r\n  // }\r\n  // if (!values.priority) {\r\n  //   errors.priority = \"Please Select a priortiy\";\r\n  // }\r\n  // if (!values.comments) {\r\n  //   errors.comments = \"Please Enter your comment\";\r\n  // }\r\n  // if (noHtmlRegex.test(values.reply_comment)) {\r\n  //   errors.reply_comment = messages.invalid;\r\n  // }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const autoReplayValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.title) {\r\n    errors.title = \"Title is required.\";\r\n  }\r\n  if (values.review_type !== null ? values.review_type.length === 0 : true) {\r\n    errors.review_type = \"Review Type is Required.\";\r\n  }\r\n  if (values.outlet_id !== null ? values.outlet_id.length === 0 : true) {\r\n    errors.outlet_id = \"Please select at least one location.\";\r\n  }\r\n  if (values.review_template_id !== null ? values.review_template_id.length === 0 : true) {\r\n    errors.review_template_id = \"Review Template is required.\";\r\n  }\r\n  if (!values.day && !values.hours && !values.minutes) {\r\n    errors.day = \"Time is required.\";\r\n  }\r\n\r\n  if (values.day && parseInt(values.day) > 10) {\r\n    errors.day = \"you cannot select more than 10 days.\";\r\n  }\r\n  if (values.hours && parseInt(values.hours) > 24) {\r\n    errors.hours = \"you cannot select more than 24 hours.\";\r\n  }\r\n  if (values.c && parseInt(values.minutes) > 60) {\r\n    errors.minutes = \"you cannot select more than 60 minutes.\";\r\n  }\r\n  // if (!values.priority) {\r\n  //   errors.priority = \"Please Select a priortiy\";\r\n  // }\r\n  // if (!values.comments) {\r\n  //   errors.comments = \"Please Enter your comment\";\r\n  // }\r\n  // if (noHtmlRegex.test(values.reply_comment)) {\r\n  //   errors.reply_comment = messages.invalid;\r\n  // }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const regionValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Add Region Name\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const FeildManageValidatorPassword = (values) => {\r\n  // console.log(values);\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is Required\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"Old Password is Required\";\r\n  }\r\n  if (!values.newPassword) {\r\n    errors.newPassword = \"New Password is Required\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const TemplateValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Template Name is Required\";\r\n  }\r\n  if (!values.upload_docs) {\r\n    errors.upload_docs = \"Upload Docs is Required\";\r\n  }\r\n\r\n  if (values.price < 1) {\r\n    errors.price = \"Price must be greater than 0\";\r\n  }\r\n  if (!values.price) {\r\n    errors.price = \"Price is Required\";\r\n  }\r\n  if (!values.service_details) {\r\n    errors.service_details = \"Service Details is Required\";\r\n  }\r\n  if (!values.description) {\r\n    errors.description = \"Description is Required\";\r\n  }\r\n  if (values.sign_fee < 1) {\r\n    errors.sign_fee = \"Sign Fee must be greater than 0\";\r\n  }\r\n  if (!values.sign_fee) {\r\n    errors.sign_fee = \"Sign Fee is Required\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const disAppValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (values.first_Name_check == true) {\r\n    if (!values.first_Name) {\r\n      errors.first_Name = messages.invalid;\r\n    }\r\n  }\r\n  if (values.last_Name_check == true) {\r\n    if (!values.last_Name) {\r\n      errors.last_Name = messages.invalid;\r\n    }\r\n  }\r\n  if (values.user_email_check == true) {\r\n    if (!values.user_email) {\r\n      errors.user_email = messages.invalid;\r\n    }\r\n  }\r\n  if (values.mobile_Number_check == true) {\r\n    if (!values.mobile_Number) {\r\n      errors.mobile_Number = messages.invalid;\r\n    }\r\n  }\r\n  if (values.user_business_logo_check == true) {\r\n    if (!values.user_business_logo) {\r\n      errors.user_business_logo = messages.invalid;\r\n    }\r\n  }\r\n  if (values.user_firm_name_check == true) {\r\n    if (!values.user_firm_name) {\r\n      errors.user_firm_name = messages.invalid;\r\n    }\r\n  }\r\n  return errors;\r\n};\r\nexport const pressValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.yearDate) {\r\n    errors.yearDate = \"Year is Required\";\r\n  }\r\n  if (!values.title) {\r\n    errors.title = \"Title is Required\";\r\n  } else if (values.title.length > 40) {\r\n    errors.title = \"Title can't be exceed more than 40 characters\";\r\n  }\r\n  if (!values.description) {\r\n    errors.description = \"Description is Required\";\r\n  }\r\n  return errors;\r\n};\r\nexport const testValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.clientName) {\r\n    errors.clientName = \"Client Name is Required\";\r\n  } else if (values.clientName.length > 40) {\r\n    errors.clientName = \"Client Name can't be exceed more than 40 characters\";\r\n  }\r\n  if (!values.image[0]) {\r\n    errors.image = \"Upload image\";\r\n  }\r\n  if (!values.description) {\r\n    errors.description = \"Description is Required\";\r\n  }\r\n  if (values.description.length > 250) {\r\n    errors.description = \"Description can't be exceed more than 250 characters\";\r\n  }\r\n  if (!values.location) {\r\n    errors.location = \"Lcation is Required\";\r\n  }\r\n  return errors;\r\n};\r\nexport const catValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (!values.catName) {\r\n    errors.catName = \"Name is Required\";\r\n  } else if (values.catName.length > 40) {\r\n    errors.catName = \"Name can't be exceed more than 40 characters\";\r\n  }\r\n  if (!values.desciption) {\r\n    errors.desciption = \"Description is Required\";\r\n  } else if (values.desciption.length > 250) {\r\n    errors.desciption = \"Description can't be exceed more than 250 characters\";\r\n  }\r\n  return errors;\r\n};\r\nexport const attValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (!values.fieldType) {\r\n    errors.fieldType = \"Type is Required\";\r\n  } else if (values.fieldType == \"Dropdown\") {\r\n    if (values.valueInArray.length == 0) {\r\n      errors.valueInArray = \"Options is Required\";\r\n    }\r\n  }\r\n  if (!values.title) {\r\n    errors.title = \"Title is Required\";\r\n  }\r\n  if (!values.placeholder) {\r\n    errors.placeholder = \"Placeholder is Required\";\r\n  }\r\n  return errors;\r\n};\r\nexport const opNameValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.option_name) {\r\n    errors.option_name = \"Name is Required\";\r\n  }\r\n  return errors;\r\n};\r\nexport const notificationValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.title) {\r\n    errors.title = \"Title is Required\";\r\n  } else if (values.title.length > 40) {\r\n    errors.title = \"Title can't be exceed more than 40 characters\";\r\n  }\r\n  if (!values.description) {\r\n    errors.description = \"Description is Required\";\r\n  } else if (values.description.length > 250) {\r\n    errors.description = \"Description can't be exceed more than 250 characters\";\r\n  }\r\n  // else if (values.description.length > 250) {\r\n  //   errors.description = \"Limit exceed\";\r\n  // }\r\n  console.log(values);\r\n  return errors;\r\n};\r\nexport const blogValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (!values.title) {\r\n    errors.title = \"Title is Required\";\r\n  } else if (values.title.length > 40) {\r\n    errors.title = \"Title can't be exceed more than 40 characters\";\r\n  }\r\n  if (!values.short_description) {\r\n    errors.short_description = \"Short Description is Required\";\r\n  }\r\n  if (!values.details_description) {\r\n    errors.details_description = \"Detailed Description is Required\";\r\n  }\r\n  if (values.image.length == 0) {\r\n    errors.image = \"Select Image\";\r\n  }\r\n  // if (!values.image) {\r\n  //   errors.image = \"Select Image\";\r\n  // }\r\n  return errors;\r\n};\r\n\r\n\r\nexport const subAdminEmailValidator = (values) => {\r\n  console.log(values);\r\n  let regex=/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is Required\";\r\n  } else if (!values.email.match(regex)) {\r\n    errors.email = \"Invalid Email\";\r\n  }\r\n  \r\n  return errors;\r\n};\r\n\r\nexport const roleManagementValidator = (values) => {\r\n  \r\n  let errors = {};\r\n  if (!values.roll_name) {\r\n    errors.roll_name = \"Role Name is Required\";\r\n  }\r\n  if(values.roll_access.length===0){\r\n    errors.panel=\"Select One Panel\"\r\n  }\r\n  \r\n  return errors;\r\n};\r\nexport const SubAdminManagementValidator= (values) => {\r\n  console.log(values);\r\n  let regex=/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is Required\";\r\n  } else if (!values.email.match(regex)) {\r\n    errors.email = \"Invalid Email\";\r\n  }\r\n  if(!values.roll_access_id){\r\n    errors.role=\"Select One Role\"\r\n  }\r\n  \r\n  return errors;\r\n};","import axios from \"../axios\";\r\n\r\nexport const uploadImage = async (file) => {\r\n  var formData = new FormData();\r\n  formData.append(\"media\", file);\r\n  let data = await axios\r\n    .post(\"/admin/uploadDocument\", formData)\r\n    .then((res) => {\r\n      console.log(res.data.data.path);\r\n      return res.data.data.path;\r\n    })\r\n\r\n    .catch((err) => {});\r\n  return data;\r\n};\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M4 4h7V2H4c-1.1 0-2 .9-2 2v7h2V4zm6 9l-4 5h12l-3-4-2.03 2.71L10 13zm7-4.5c0-.83-.67-1.5-1.5-1.5S14 7.67 14 8.5s.67 1.5 1.5 1.5S17 9.33 17 8.5zM20 2h-7v2h7v7h2V4c0-1.1-.9-2-2-2zm0 18h-7v2h7c1.1 0 2-.9 2-2v-7h-2v7zM4 13H2v7c0 1.1.9 2 2 2h7v-2H4v-7z\"\n}), 'Wallpaper');\n\nexports.default = _default;"],"sourceRoot":""}