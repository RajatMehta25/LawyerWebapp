{"version":3,"sources":["pages/Authentication/changePasword.js","components/Input.js","../node_modules/@material-ui/icons/ArrowBack.js","../node_modules/@material-ui/core/esm/Paper/Paper.js","utils/validators.js"],"names":["useStyles","makeStyles","theme","root","flexWrap","marginTop","margin","spacing","extendedIcon","marginRight","paperHeading","padding","textMiddle","verticalAlign","iconMargin","headingButton","display","flexDirection","container","maxHeight","rowPadding","headingCenter","width","alignItems","justifyContent","paperPaddingRightLeft","paperHeight","height","paperTableHeight","AddCategory","props","classes","state","location","console","log","useState","showOldPassword","setShowOldPassword","showNewPassword","setShowNewPassword","saveCategory","values","a","requestData","email","oldPassword","password","newPassword","axios","post","data","Cookies","remove","history","push","pathname","toast","success","message","position","POSITION","TOP_RIGHT","error","response","get","JSON","parse","Fragment","className","classNames","elevation","variant","aria-label","onClick","goBack","xs","enableReinitialize","initialValues","validate","FeildManageValidatorPassword","validateOnChange","onSubmit","formikBag","name","field","htmlFor","type","value","onChange","e","setFieldValue","target","disabled","touched","errors","style","top","right","backgroundColor","color","Input","paddingTop","fontSize","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","React","_default","createElement","d","Paper","ref","_props$component","component","Component","_props$square","square","_props$elevation","_props$variant","other","_objectWithoutProperties","_extends","clsx","outlined","concat","rounded","withStyles","elevations","shadows","forEach","shadow","index","boxShadow","palette","background","paper","text","primary","transition","transitions","create","borderRadius","shape","border","divider","messages","TemplateValidator","upload_docs","price","service_details","description","sign_fee","disAppValidator","first_Name_check","first_Name","last_Name_check","last_Name","user_email_check","user_email","mobile_Number_check","mobile_Number","user_business_logo_check","user_business_logo","user_firm_name_check","user_firm_name","pressValidator","yearDate","title","length","testValidator","clientName","image","catValidator","catName","desciption","attValidator","fieldType","valueInArray","placeholder","opNameValidator","option_name","notificationValidator","blogValidator","short_description","details_description","subAdminEmailValidator","match","roleManagementValidator","roll_name","roll_access","panel","SubAdminManagementValidator","roll_access_id","role"],"mappings":"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","file":"static/js/40.e987673d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport classNames from \"classnames\";\r\n// import { get } from \"lodash\";\r\n// import { handleImageUpload } from \"../../../services/upload-files.service\";\r\nimport axios from \"../../axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n// import { Multiselect } from \"multiselect-react-dropdown\";\r\nimport { get } from \"lodash\";\r\nimport {FeildManageValidatorPassword} from '../../utils/validators'\r\n\r\nimport { Formik, Field, Form } from \"formik\";\r\nimport Input from \"../../components/Input\";\r\n// import Select from \"../../components/Select\";\r\nimport Cookies from \"js-cookie\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexWrap: \"wrap\",\r\n        marginTop: \"5rem\",\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    paperHeading: {\r\n        padding: \"1rem 0rem\",\r\n    },\r\n    textMiddle: {\r\n        verticalAlign: \"middle !important\",\r\n    },\r\n    iconMargin: {\r\n        marginRight: \"0.5rem\",\r\n    },\r\n    headingButton: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        // justifyContent: 'space-between',\r\n    },\r\n    container: {\r\n        maxHeight: \"58vh\",\r\n    },\r\n    rowPadding: {\r\n        padding: \"2rem 0rem\",\r\n    },\r\n    headingCenter: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    paperPaddingRightLeft: {\r\n      padding: '0rem 1rem',\r\n    },\r\n    paperHeight: {\r\n      height: \"90vh\",\r\n    },\r\n    paperTableHeight: {\r\n      height: \"100%\",\r\n    },\r\n}));\r\n\r\n\r\nconst AddCategory = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const {\r\n        location: { state },\r\n    } = props;\r\n    console.log(props);\r\n\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [showOldPassword,setShowOldPassword]=useState(false)\r\n    const [showNewPassword,setShowNewPassword]=useState(false)\r\n\r\n    const saveCategory = async (values) => {\r\n        \r\n        let requestData = {\r\n            email: values.email,\r\n            oldPassword: values.password,\r\n            newPassword: values.newPassword,\r\n        };\r\n        console.log(requestData);\r\n        let url = \"/admin/changePassword\";\r\n        try {\r\n            const { data } = await axios.post(url, requestData);\r\n            Cookies.remove('admin_access_token')\r\n            props.history.push({\r\n                pathname: \"/adminPanel/login\",\r\n            });\r\n            toast.success(data.message, {\r\n                position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n        } catch (error) {\r\n            toast.error(`${error.response.data.message}`, {\r\n                position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n        }\r\n    };\r\n    const newCategory = () => {\r\n        setSubmitted(false);\r\n    };\r\n      \r\n      const email = Cookies.get(\"email\")\r\n      ? JSON.parse(Cookies.get(\"email\"))\r\n      : [];\r\n      console.log(email);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={classes.root}>\r\n                <Paper>\r\n                    <div className={classes.paperPaddingRightLeft}>\r\n                        <div className={classNames(\"py-4\", classes.paperHeight)}>\r\n                            <Paper\r\n                                elevation={0}\r\n                                className={classNames(\r\n                                    classes.paperHeading,\r\n                                    classes.headingButton\r\n                                )}\r\n                            >\r\n                                <div>\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        // color=\"primary\"\r\n                                        aria-label=\"add\"\r\n                                        className={classes.iconMargin}\r\n                                        onClick={() => {\r\n                                            props.history.goBack();\r\n                                        }}\r\n                                    >\r\n                                        <ArrowBackIcon />\r\n                                    </Button>\r\n                                </div>\r\n                                <h3 className={classes.headingCenter}>\r\n                                    Change Password\r\n                                </h3>\r\n                            </Paper>\r\n                            <Paper className={classes.paperTableHeight}>\r\n                                <Row className={classes.rowPadding}>\r\n                                    <Col xs={3}></Col>\r\n                                    <Col xs={6}>\r\n                                        <div className=\"submit-form\">\r\n                                            {/* {submitted ? (\r\n                                                <div>\r\n                                                    <h4>You submitted successfully!</h4>\r\n                                                    <button\r\n                                                        className=\"btn btn-success\"\r\n                                                        onClick={newCategory}\r\n                                                    >\r\n                                                        Add\r\n                                                    </button>\r\n                                                </div>\r\n                                            ) : ( */}\r\n                                                <div>\r\n                                                    <Formik\r\n                                                        enableReinitialize\r\n                                                        initialValues={{\r\n                                                            email: email,\r\n                                                            password: get(state, \"password\", \"\"),\r\n                                                            newPassword: get(state, \"newPassword\", \"\"),\r\n                                                        }}\r\n                                                        validate={(values) => FeildManageValidatorPassword(values)}\r\n                                                        validateOnChange\r\n                                                        onSubmit={saveCategory}\r\n                                                    >\r\n                                                        {(formikBag) => {\r\n                                                            return (\r\n                                                                <Form>\r\n                                                                    <Field name=\"email\">\r\n                                                                        {({ field }) => (\r\n                                                                            <div className=\"form-group\">\r\n                                                                                <label htmlFor=\"email\">\r\n                                                                                    Email\r\n                                                                                </label>\r\n                                                                                <Input\r\n                                                                                    {...field}\r\n                                                                                    type=\"text\"\r\n                                                                                    className=\"form-control\"\r\n                                                                                    value={formikBag.values.email}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        formikBag.setFieldValue(\r\n                                                                                            \"email\",\r\n                                                                                            e.target.value\r\n                                                                                        );\r\n                                                                                    }}\r\n                                                                                    disabled\r\n                                                                                    error={\r\n                                                                                        formikBag.touched.email &&\r\n                                                                                            formikBag.errors.email\r\n                                                                                            ? formikBag.errors.email\r\n                                                                                            : null\r\n                                                                                    }\r\n                                                                                />\r\n                                                                            </div>\r\n                                                                        )}\r\n                                                                    </Field>\r\n                                                                    <Field name=\"password\">\r\n                                                                        {({ field }) => (\r\n                                                                            <div className=\"form-group\">\r\n                                                                                <label htmlFor=\"password\">\r\n                                                                                    Enter Old Password\r\n                                                                                </label>\r\n                                                                                <div style={{position:\"relative\"}}>\r\n                                                                                <Input\r\n                                                                                    {...field}\r\n                                                                                    type={showOldPassword?\"text\":\"password\"}\r\n                                                                                    className=\"form-control\"\r\n                                                                                    value={formikBag.values.password}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        formikBag.setFieldValue(\r\n                                                                                            \"password\",\r\n                                                                                            e.target.value\r\n                                                                                        );\r\n                                                                                    }}\r\n                                                                                    error={\r\n                                                                                        formikBag.touched.password &&\r\n                                                                                            formikBag.errors.password\r\n                                                                                            ? formikBag.errors.password\r\n                                                                                            : null\r\n                                                                                    }\r\n                                                                                />\r\n                                                                                <div style={{position:\"absolute\",top:6,right:10}}>\r\n                                                                                   {showOldPassword? <VisibilityOff onClick={()=>setShowOldPassword(false)}/>:<Visibility onClick={()=>setShowOldPassword(true)}/>}\r\n                                                                                </div>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        )}\r\n                                                                    </Field>\r\n                                                                    <Field name=\"newPassword\">\r\n                                                                        {({ field }) => (\r\n                                                                            <div className=\"form-group\">\r\n                                                                                <label htmlFor=\"password\">\r\n                                                                                    Enter New Password\r\n                                                                                </label>\r\n                                                                                <div style={{position:\"relative\"}}>\r\n                                                                                <Input\r\n                                                                                    {...field}\r\n                                                                                    type={showNewPassword?\"text\":\"password\"}\r\n                                                                                    className=\"form-control\"\r\n                                                                                    value={formikBag.values.newPassword}\r\n                                                                                    onChange={(e) => {\r\n                                                                                        formikBag.setFieldValue(\r\n                                                                                            \"newPassword\",\r\n                                                                                            e.target.value\r\n                                                                                        );\r\n                                                                                    }}\r\n                                                                                    error={\r\n                                                                                        formikBag.touched.newPassword &&\r\n                                                                                            formikBag.errors.newPassword\r\n                                                                                            ? formikBag.errors.newPassword\r\n                                                                                            : null\r\n                                                                                    }\r\n                                                                                />\r\n                                                                                  <div style={{position:\"absolute\",top:6,right:10}}>\r\n                                                                                   {showNewPassword? <VisibilityOff onClick={()=>setShowNewPassword(false)}/>:<Visibility onClick={()=>setShowNewPassword(true)}/>}\r\n                                                                                </div>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        )}\r\n                                                                    </Field>\r\n                                                                    <div\r\n                                                                        className={classNames(\r\n                                                                            \"form-group\",\r\n                                                                            classes.headingCenter\r\n                                                                        )}\r\n                                                                    >\r\n                                                                        <button\r\n                                                                            type=\"submit\"\r\n                                                                            className=\"btn \"\r\n                                                                            style={{backgroundColor:\"#0294b3\",color:\"white\"}}\r\n                                                                        >\r\n                                                                            Submit\r\n                                                                        </button>\r\n                                                                    </div>\r\n                                                                </Form>\r\n                                                            );\r\n                                                        }}\r\n                                                    </Formik>\r\n                                                </div>\r\n                                            {/* )} */}\r\n                                        </div>\r\n                                    </Col>\r\n                                    <Col xs={3}></Col>\r\n                                </Row>\r\n                            </Paper>\r\n                        </div>\r\n                    </div>\r\n                </Paper>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from \"react\";\r\n\r\nexport default function Input(props) {\r\n  const { error } = props;\r\n  return (\r\n    <>\r\n      <input {...props} className=\"form-control\" style={{color: \"black\"}} />\r\n      {error ? (\r\n        <p style={{ paddingTop: 5, fontSize: 13, color: \"red\" }}>{error}</p>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"\n}), 'ArrowBack');\n\nexports.default = _default;","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  var elevations = {};\n  theme.shadows.forEach(function (shadow, index) {\n    elevations[\"elevation\".concat(index)] = {\n      boxShadow: shadow\n    };\n  });\n  return _extends({\n    /* Styles applied to the root element. */\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      color: theme.palette.text.primary,\n      transition: theme.transitions.create('box-shadow')\n    },\n\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      border: \"1px solid \".concat(theme.palette.divider)\n    }\n  }, elevations);\n};\nvar Paper = /*#__PURE__*/React.forwardRef(function Paper(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$square = props.square,\n      square = _props$square === void 0 ? false : _props$square,\n      _props$elevation = props.elevation,\n      elevation = _props$elevation === void 0 ? 1 : _props$elevation,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'elevation' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"square\", \"elevation\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant === 'outlined' ? classes.outlined : classes[\"elevation\".concat(elevation)], !square && classes.rounded),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Paper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\r\n   * Shadow depth, corresponds to `dp` in the spec.\r\n   * It accepts values between 0 and 24 inclusive.\r\n   */\n  elevation: chainPropTypes(PropTypes.number, function (props) {\n    var classes = props.classes,\n        elevation = props.elevation; // in case `withStyles` fails to inject we don't need this warning\n\n    if (classes === undefined) {\n      return null;\n    }\n\n    if (elevation != null && classes[\"elevation\".concat(elevation)] === undefined) {\n      return new Error(\"Material-UI: This elevation `\".concat(elevation, \"` is not implemented.\"));\n    }\n\n    return null;\n  }),\n\n  /**\r\n   * If `true`, rounded corners are disabled.\r\n   */\n  square: PropTypes.bool,\n\n  /**\r\n   * The variant to use.\r\n   */\n  variant: PropTypes.oneOf(['elevation', 'outlined'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiPaper'\n})(Paper);","const messages = {\r\n  invalid: \"Field is required.\",\r\n  email: \"Enter a valid email address.\",\r\n  password:\r\n    \"It should contain 7 to 15 characters which contain at least one numeric digit and a special character and one uppercase no whitespace.\",\r\n  passwordMatch: \"Password does not match.\",\r\n  // invalid: \"Given data is invalid.\"\r\n};\r\n\r\n//global regex\r\nconst noHtmlRegex = /<\\/?[^>]+(>|$)/g;\r\nconst onlyAlphbetRegex = /^[a-zA-Z ]*$/;\r\nconst phoneRegex = /^([4-9])(\\d{9})$/;\r\n\r\nconst checkEmail = (value) => {\r\n  if (\r\n    !/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n      value\r\n    )\r\n  ) {\r\n    return true;\r\n  } else if (value.includes('\"') || value.includes(\"'\") || value.includes(\",\") || value.includes(\" \")) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n// const emal\r\n\r\nexport const loginValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"Password is required.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const bannerValidator = (values, bannerImage) => {\r\n  let errors = {};\r\n  if (!bannerImage) {\r\n    alert(\"Select a Banner Image\");\r\n  }\r\n\r\n  return errors;\r\n};\r\nexport const cuisineValidator = (values, bannerImage) => {\r\n  let errors = {};\r\n  if (!values.title) {\r\n    errors.title = \"Please enter title\";\r\n  }\r\n\r\n  if (!values.image) {\r\n    errors.image = \"Please upload cuisine image\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const forgotPasswordValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Enter a valid email address.\";\r\n  }\r\n  console.log(errors);\r\n  return errors;\r\n};\r\n\r\nexport const resetValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.password) {\r\n    errors.password = \"Password is required.\";\r\n  } else if (!/^(?=.*[0-9])(?=.*[!@#$%^&*-])(?=.*[A-Z])(?=.*[a-z])[a-zA-Z0-9!@#$%^&*-]{7,15}$/.test(values.password)) {\r\n    errors.password =\r\n      \"It should contain 7 to 15 characters which contain at least one numeric digit and a special character and one uppercase no whitespace.\";\r\n  }\r\n\r\n  if (!values.confirm_password) {\r\n    errors.confirm_password = \"Confirm Password is required.\";\r\n  } else if (values.password !== values.confirm_password) {\r\n    errors.confirm_password = \"Password does not Match.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const changePasswordValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.current_password) {\r\n    errors.current_password = \"Current Password is required.\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"New Password is required.\";\r\n  } else if (!/^(?=.*[0-9])(?=.*[!@#$%^&*-])(?=.*[A-Z])(?=.*[a-z])[a-zA-Z0-9!@#$%^&*-]{7,15}$/.test(values.password)) {\r\n    errors.password =\r\n      \"It should contain 7 to 15 characters which contain at least one numeric digit and a special character and one uppercase no whitespace.\";\r\n  }\r\n\r\n  if (!values.confirm_password) {\r\n    errors.confirm_password = \"Confirm password is required.\";\r\n  } else if (values.password !== values.confirm_password) {\r\n    errors.confirm_password = \"Password does not Match.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const employeeValidator = (values) => {\r\n  let errors = {};\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Employee name is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n  let emailval = String(values.email).toLowerCase();\r\n  if (!values.email) {\r\n    errors.email = \"Employee email is required.\";\r\n  } else if (noHtmlRegex.test(values.email)) {\r\n    errors.email = messages.invalid;\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = messages.invalid;\r\n  } else if (!/(.*)@singleinterface\\.com/.test(emailval)) {\r\n    errors.email = \"Only singleinterface email id need to be enter.\";\r\n  }\r\n\r\n  if (!values.phone) {\r\n    errors.phone = \"Employee phone number is required.\";\r\n  } else if (noHtmlRegex.test(values.phone)) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!phoneRegex.test(values.phone)) {\r\n    errors.phone = \"Phone no is Invalid.\";\r\n  }\r\n\r\n  if (!values.department) {\r\n    errors.department = \"Employee department is required.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const orderValidator = (values, activeStep) => {\r\n  let errors = {};\r\n\r\n  //step 1\r\n  if (activeStep === 1) {\r\n    if (!values.business_name) {\r\n      errors.business_name = \"Business name is required.\";\r\n    } else if (noHtmlRegex.test(values.business_name)) {\r\n      errors.business_name = messages.invalid;\r\n    }\r\n\r\n    if (!values.contact_person_name) {\r\n      errors.contact_person_name = \"Contact person name is required.\";\r\n    } else if (noHtmlRegex.test(values.contact_person_name)) {\r\n      errors.contact_person_name = messages.invalid;\r\n    }\r\n    if (!values.company_email) {\r\n      errors.company_email = \"Company email is required.\";\r\n    } else if (checkEmail(values.company_email)) {\r\n      errors.company_email = \"Company Email is not valid.\";\r\n    } else if (noHtmlRegex.test(values.company_email)) {\r\n      errors.company_email = messages.invalid;\r\n    }\r\n\r\n    if (!values.website) {\r\n      errors.website = \"Website name is required.\";\r\n    } else if (\r\n      /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/.test(\r\n        values.website\r\n      ) !== true\r\n    ) {\r\n      errors.website = \"Invalid website name.\";\r\n    }\r\n\r\n    if (!values.phone) {\r\n      errors.phone = \"Phone number is required.\";\r\n    } else if (noHtmlRegex.test(values.phone)) {\r\n      errors.phone = messages.invalid;\r\n    } else if (!/^([4-9])(\\d{9})$/.test(values.phone)) {\r\n      errors.phone = \"Phone no is Invalid.\";\r\n    }\r\n  }\r\n  //step 2\r\n  if (activeStep === 2) {\r\n    if (!values.pincode) {\r\n      errors.pincode = \"Pincode is required.\";\r\n    } else if (noHtmlRegex.test(values.pincode)) {\r\n      errors.pincode = messages.invalid;\r\n    }\r\n    if (!values.address) {\r\n      errors.address = \"Address is required.\";\r\n    } else if (noHtmlRegex.test(values.address)) {\r\n      errors.address = messages.invalid;\r\n    }\r\n  }\r\n\r\n  if (activeStep === 3) {\r\n    if (values[\"employee_id\"] == undefined || values.employee_id.length === 0) {\r\n      errors.employee_id = \"Please select an employee.\";\r\n    } else if (values.employee_id.length > 10) {\r\n      errors.employee_id = \"You may select max 10 person only.\";\r\n    }\r\n  }\r\n  if (activeStep === 4) {\r\n    if (!values.locations) {\r\n      errors.locations = \"Locations are required.\";\r\n    } else if (/^[0-9]*$/g.test(values.locations) !== true) {\r\n      errors.locations = messages.invalid;\r\n    } else if (values.locations < 1) {\r\n      errors.locations = messages.invalid;\r\n    } else if (values.locations > 100000) {\r\n      errors.locations = \"Please enter location less than 100000\";\r\n    }\r\n\r\n    if (!values.order_code) {\r\n      errors.order_code = \"Order Code required.\";\r\n    } else if (!/^.{5,6}$/.test(values.order_code)) {\r\n      errors.order_code = \"Minimum 5 character or max 6 character required.\";\r\n    } else if (noHtmlRegex.test(values.order_code)) {\r\n      errors.order_code = messages.invalid;\r\n    }\r\n\r\n    if (!values.subscription_start_date) {\r\n      errors.subscription_start_date = \"Please Select Date Properly.\";\r\n    }\r\n    if (!values.subscription_end_date) {\r\n      errors.subscription_start_date = \"Please Select Date Properly.\";\r\n    }\r\n\r\n    if (values.subscription_end_date < values.subscription_start_date) {\r\n      errors.subscription_start_date = \"Start date can’t be greater than end date.\";\r\n    }\r\n    if (values.gmb_multi_acc_allowed) {\r\n      if (!values.gmb_email_address) {\r\n        errors.gmb_email_address = \"GMB email is required.\";\r\n      } else if (checkEmail(values.gmb_email_address)) {\r\n        errors.gmb_email_address = \"GMB Email is not valid.\";\r\n      } else if (noHtmlRegex.test(values.gmb_email_address)) {\r\n        errors.gmb_email_address = messages.invalid;\r\n      }\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const permissionValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n  if (!values.menu_id) {\r\n    errors.menu_id = \"Menu is required.\";\r\n  } else if (noHtmlRegex.test(values.menu_id)) {\r\n    errors.menu_id = messages.invalid;\r\n  }\r\n  if (!values.action) {\r\n    errors.action = \"Action is required.\";\r\n  } else if (noHtmlRegex.test(values.action)) {\r\n    errors.action = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.prefix)) {\r\n    errors.prefix = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.plugin)) {\r\n    errors.plugin = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.description)) {\r\n    errors.description = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const menuValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n  if (!values.controller) {\r\n    errors.controller = \"Controller is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.controller = messages.invalid;\r\n  }\r\n\r\n  if (noHtmlRegex.test(values.span)) {\r\n    errors.span = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.inline_style)) {\r\n    errors.inline_style = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.description)) {\r\n    errors.description = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const countryValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (values.name.length > 30) {\r\n    errors.name = messages.invalid;\r\n  } else if (values.name.includes(\"  \")) {\r\n    errors.name = \"Please remove extra whitespace.\";\r\n  } else if (!onlyAlphbetRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!onlyAlphbetRegex.test(values.alias)) {\r\n    errors.alias = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const cityValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (values.name.length > 30) {\r\n    errors.name = messages.invalid;\r\n  } else if (!onlyAlphbetRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n  if (!values.state_id) {\r\n    errors.state_id = \"State is required.\";\r\n  } else if (noHtmlRegex.test(values.state_id)) {\r\n    errors.state_id = messages.invalid;\r\n  }\r\n\r\n  if (!values.country_id) {\r\n    errors.country_id = \"Country is required.\";\r\n  } else if (noHtmlRegex.test(values.country_id)) {\r\n    errors.country_id = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const stateValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (values.name.length > 30) {\r\n    errors.name = messages.invalid;\r\n  } else if (!onlyAlphbetRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (values.state_code.length > 30) {\r\n    errors.state_code = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.state_code)) {\r\n    errors.state_code = messages.invalid;\r\n  }\r\n\r\n  if (!values.country_id) {\r\n    errors.country_id = \"Country is required.\";\r\n  } else if (noHtmlRegex.test(values.country_id)) {\r\n    errors.country_id = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\nexport const localityValidtor = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!values.pin_code) {\r\n    errors.pin_code = \"Pincode is required.\";\r\n  } else if (!/^[1-9][0-9]{5}$/.test(values.pin_code)) {\r\n    errors.pin_code = \"Invalid Pincode\";\r\n  } else if (noHtmlRegex.test(values.pin_code)) {\r\n    errors.pin_code = messages.invalid;\r\n  }\r\n  if (!values.city_id) {\r\n    errors.city_id = \"City is required.\";\r\n  } else if (noHtmlRegex.test(values.city_id)) {\r\n    errors.city_id = messages.invalid;\r\n  }\r\n  if (!values.state_id) {\r\n    errors.state_id = \"State is required.\";\r\n  } else if (noHtmlRegex.test(values.state_id)) {\r\n    errors.state_id = messages.invalid;\r\n  }\r\n\r\n  if (!values.country_id) {\r\n    errors.country_id = \"Country is required.\";\r\n  } else if (noHtmlRegex.test(values.country_id)) {\r\n    errors.country_id = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const campaignValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.campaign_name) {\r\n    errors.campaign_name = \"Campaign name is required.\";\r\n  } else if (values.campaign_name.includes(\"  \")) {\r\n    errors.campaign_name = \"Please remove extra whitespace.\";\r\n  } else if (noHtmlRegex.test(values.campaign_name)) {\r\n    errors.campaign_name = messages.invalid;\r\n  }\r\n\r\n  if (values.template_id !== null ? values.template_id.length === 0 : true) {\r\n    errors.template_id = \"Template is required.\";\r\n  }\r\n  if (values.campaign_type !== null ? values.campaign_type.length === 0 : true) {\r\n    errors.campaign_type = \"Campaign Type is required.\";\r\n  }\r\n\r\n  if (values.location_id !== null ? values.location_id.length === 0 : true) {\r\n    errors.location_id = \"Location is required.\";\r\n  }\r\n\r\n  if (!values.start_date) {\r\n    errors.start_date = \"Please Select Date Properly.\";\r\n  }\r\n  if (!values.end_date) {\r\n    errors.end_date = \"Please Select Date Properly.\";\r\n  }\r\n\r\n  if (values.end_date < values.end_date) {\r\n    errors.start_date = \"Start date can’t be greater than end date.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const roleValidator = (values, data) => {\r\n  let errors = {};\r\n\r\n  // if (data.length === 0) {\r\n  //   errors.permission = true;\r\n  // }\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (values.name.length > 100) {\r\n    errors.name = \"Name should not be greater than 100.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const userValidator = (values, superAdminSelected, roleDefaultVal) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.nick_name)) {\r\n    errors.nick_name = messages.invalid;\r\n  }\r\n  if (noHtmlRegex.test(values.department)) {\r\n    errors.department = messages.invalid;\r\n  }\r\n\r\n  if (noHtmlRegex.test(values.department)) {\r\n    errors.job_title = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    errors.phone = \"Phone no is required.\";\r\n  } else if (!phoneRegex.test(values.phone) && values.phone) {\r\n    errors.phone = \"Phone no is Invalid.\";\r\n  }\r\n\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid.\";\r\n  } else if (noHtmlRegex.test(values.company_email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!roleDefaultVal) {\r\n    errors.role = \"Role is required.\";\r\n  }\r\n  if (!superAdminSelected) {\r\n    if (values.location_id !== null ? values.location_id.length === 0 : true) {\r\n      errors.location_id = \"Location is required.\";\r\n    } else if (noHtmlRegex.test(values.location_id)) {\r\n      errors.location_id = messages.invalid;\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const contactValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Please enter contact name.\";\r\n  } else if (values.name.includes(\"  \")) {\r\n    errors.name = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!values.email) {\r\n    if (!values.phone) {\r\n      errors.email = \"Email is required.\";\r\n    }\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid.\";\r\n  } else if (noHtmlRegex.test(values.company_email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    if (!values.email) {\r\n      errors.phone = \"Please enter contact phone number.\";\r\n    }\r\n  } else if (noHtmlRegex.test(values.phone) && values.phone) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!/^([4-9])(\\d{9})$/.test(values.phone) && values.phone) {\r\n    errors.phone = \"Enter a valid phone no.\";\r\n  }\r\n\r\n  if (values.location_id === null) {\r\n    errors.location_id = \"Please select contact location.\";\r\n  }\r\n\r\n  if (values.group !== null ? values.group.length === 0 : true) {\r\n    if (values.campaign_id === null) {\r\n      errors.campaign_id = \"Please select a camgpaign if you are not selecting a group.\";\r\n    }\r\n  }\r\n  if (values.campaign_id === null) {\r\n    if (values.group !== null ? values.group.length === 0 : true) {\r\n      errors.group = \"Please select at-least one group if you are not selecting a campaign.\";\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const qrContactValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Please enter contact name.\";\r\n  } else if (values.name.includes(\"  \")) {\r\n    errors.name = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid.\";\r\n  } else if (noHtmlRegex.test(values.company_email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    errors.phone = \"Please enter contact phone number.\";\r\n  } else if (noHtmlRegex.test(values.phone) && values.phone) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!/^([4-9])(\\d{9})$/.test(values.phone) && values.phone) {\r\n    errors.phone = \"Enter a valid phone no.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const assignCampaignvalidator = (values) => {\r\n  let errors = {};\r\n  console.log(values.location_id);\r\n  if (values.location_id === null) {\r\n    errors.location_id = \"Please select  location.\";\r\n  }\r\n  if (values.campaign.length === 0) {\r\n    errors.campaign = \"Please select at least one campaign to assign.\";\r\n  }\r\n  if (values.location_id !== null) {\r\n    if (values.group.length === 0) {\r\n      errors.group = \"Please select at least one group.\";\r\n    }\r\n  }\r\n  console.log(errors);\r\n\r\n  return errors;\r\n};\r\n\r\nexport const editValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Please enter contact name.\";\r\n  } else if (values.name.includes(\"  \")) {\r\n    errors.name = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!values.email) {\r\n    if (!values.phone) {\r\n      errors.email = \"Email is required.\";\r\n    }\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid\";\r\n  } else if (noHtmlRegex.test(values.company_email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    if (!values.email) {\r\n      errors.phone = \"Please enter contact phone number.\";\r\n    }\r\n  } else if (noHtmlRegex.test(values.phone) && values.phone) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!/^([4-9])(\\d{9})$/.test(values.phone) && values.phone) {\r\n    errors.phone = \"Phone no is Invalid.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const bulkContactValidator = (values, groupVal) => {\r\n  let errors = {};\r\n  var extension = \"\";\r\n  if (values.file) {\r\n    extension = values.file.name.slice(values.file.name.lastIndexOf(\".\"), values.file.name.length);\r\n  }\r\n  if (!values.file) {\r\n    errors.file = \"Please select a file.\";\r\n  } else if (extension !== \".xls\" && extension !== \".csv\" && extension !== \".xlsx\") {\r\n    errors.file = \"Given file format is invalid.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const bulkUserValidator = (values) => {\r\n  let errors = {};\r\n  let extension = \"\";\r\n  if (values.file) {\r\n    extension = values.file.name.slice(values.file.name.lastIndexOf(\".\"), values.file.name.length);\r\n  }\r\n\r\n  if (!values.file) {\r\n    errors.file = \"Please select a file.\";\r\n  } else if (extension !== \".xls\" && extension !== \".csv\" && extension !== \".xlsx\") {\r\n    errors.file = \"Given file format is invalid.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const responseValitor = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Response title is required.\";\r\n  }\r\n  if (!values.description) {\r\n    errors.description = \"Description is required.\";\r\n  }\r\n  if (!values.content) {\r\n    errors.content = \"Content is required.\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const assignGroupValidator = (values) => {\r\n  let errors = {};\r\n  if (values.group === null) {\r\n    errors.group = \"Please select at-least one group.\";\r\n  }\r\n\r\n  if (values.group !== null) {\r\n    if (values.group.length === 0) {\r\n      errors.group = \"Please select at-least one group.\";\r\n    } else if (noHtmlRegex.test(values.group)) {\r\n      errors.group = messages.invalid;\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const groupValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Group Name is required.\";\r\n  } else if (values.name.length > 100) {\r\n    errors.name = \"Group Name should not be greater than 100.\";\r\n  } else if (noHtmlRegex.test(values.name)) {\r\n    errors.name = messages.invalid;\r\n  } else if (values.name.includes(\"  \")) {\r\n    errors.name = \"Please remove extra whitespace.\";\r\n  }\r\n\r\n  if (!values.location_id) {\r\n    errors.location_id = \"Select location.\";\r\n  } else if (noHtmlRegex.test(values.location_id)) {\r\n    errors.location_id = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const templateValidator = (values, tmpUrl, pdUrl) => {\r\n  let errors = {};\r\n  if (!values.template_title) {\r\n    errors.template_title = \"Template Name is required.\";\r\n  } else if (values.template_title.includes(\"  \")) {\r\n    errors.template_title = \"Please remove extra whitespace.\";\r\n  } else if (values.template_title.length > 200) {\r\n    errors.template_title = \"Template title should not be greater than 200\";\r\n  } else if (noHtmlRegex.test(values.template_title)) {\r\n    errors.template_title = messages.invalid;\r\n  }\r\n\r\n  if (!values.sms && !values.email) {\r\n    errors.channel_type = \"Please Select atleat one channel type.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const emailValidtor = (values, tmpUrl) => {\r\n  let errors = {};\r\n\r\n  if (!values.email_from_name) {\r\n    errors.email_from_name = \"From name  is  required.\";\r\n  } else if (values.email_from_name.includes(\"  \")) {\r\n    errors.email_from_name = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.from)) {\r\n    errors.email_from_name = messages.invalid;\r\n  }\r\n\r\n  if (!values.email_from_email) {\r\n    errors.email_from_email = \"From email  is  required.\";\r\n  } else if (values.email_from_email.includes(\"  \")) {\r\n    errors.email_from_email = messages.invalid;\r\n  } else if (checkEmail(values.email_from_email)) {\r\n    errors.email_from_email = \"Enter a valid email address.\";\r\n  }\r\n  if (!values.brand_logo && tmpUrl === null) {\r\n    errors.brand_logo = \"Logo image is required.\";\r\n  }\r\n\r\n  if (values.brand_logo !== null ? values.brand_logo.size >= 2000000 : false) {\r\n    errors.brand_logo = \"The brand logo may not be greater than 2048 kilobytes.\";\r\n  }\r\n  if (values.body.replace(/<(.|\\n)*?>/g, \"\").trim().length === 0) {\r\n    errors.body = \"Body content is required.\";\r\n  }\r\n\r\n  if (!values.subject) {\r\n    errors.subject = \"Subject is required.\";\r\n  } else if (values.subject.includes(\"  \")) {\r\n    errors.subject = \"Please remove extra whitespace.\";\r\n  } else if (values.subject.length > 200) {\r\n    errors.subject = \"Email Subject  should not be greater than 200\";\r\n  } else if (noHtmlRegex.test(values.subject)) {\r\n    errors.subject = messages.invalid;\r\n  }\r\n\r\n  if (!values.headline) {\r\n    errors.headline = \"Headline is required.\";\r\n  } else if (values.headline.includes(\"  \")) {\r\n    errors.headline = \"Please remove extra whitespace.\";\r\n  } else if (values.headline.length > 200) {\r\n    errors.headline = \"Headline  should not be greater than 200\";\r\n  } else if (noHtmlRegex.test(values.headline)) {\r\n    errors.headline = messages.invalid;\r\n  }\r\n\r\n  if (!values.button_title) {\r\n    errors.button_title = \"Button Title is required.\";\r\n  } else if (values.button_title.includes(\"  \")) {\r\n    errors.button_title = \"Please remove extra whitespace.\";\r\n  } else if (values.button_title.length > 50) {\r\n    errors.button_title = \"Button Title  should not be greater than 25\";\r\n  } else if (noHtmlRegex.test(values.button_title)) {\r\n    errors.button_title = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const smsValidator = (values) => {\r\n  let errors = {};\r\n  // if (!values.sms_title) {\r\n  //   errors.sms_title = \"SMS title is  required.\";\r\n  // } else if (values.sms_title.includes(\"  \")) {\r\n  //   errors.sms_title = messages.invalid;\r\n  // } else if (noHtmlRegex.test(values.sms_title)) {\r\n  //   errors.sms_title = messages.invalid;\r\n  // }\r\n\r\n  if (!values.content) {\r\n    errors.content = \"Text Message is required.\";\r\n  } else if (noHtmlRegex.test(values.content)) {\r\n    errors.content = messages.invalid;\r\n  } else if (values.content.length > 200) {\r\n    errors.content = \"Text Message may not be greater than 200 characters.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const quickValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid.\";\r\n  } else if (noHtmlRegex.test(values.email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    errors.phone = \"Phone number is required.\";\r\n  } else if (noHtmlRegex.test(values.phone)) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!/^([4-9])(\\d{9})$/.test(values.phone)) {\r\n    errors.phone = \"Phone no is Invalid.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const quickSendValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Name is required.\";\r\n  } else if (noHtmlRegex.test(values.email)) {\r\n    errors.name = messages.invalid;\r\n  }\r\n\r\n  if (!values.email) {\r\n    errors.email = \"Email is required.\";\r\n  } else if (checkEmail(values.email)) {\r\n    errors.email = \"Email is not valid.\";\r\n  } else if (noHtmlRegex.test(values.email)) {\r\n    errors.email = messages.invalid;\r\n  }\r\n\r\n  if (!values.phone) {\r\n    errors.phone = \"Phone number is required.\";\r\n  } else if (noHtmlRegex.test(values.phone)) {\r\n    errors.phone = messages.invalid;\r\n  } else if (!phoneRegex.test(values.phone)) {\r\n    errors.phone = \"Phone no is Invalid.\";\r\n  }\r\n\r\n  if (values.outlet_id === null) {\r\n    errors.outlet_id = \"Please select  location.\";\r\n  }\r\n  if (values.template_id !== null) {\r\n    errors.template = \"Template is required.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const QrValidtor = (values, tmpUrl) => {\r\n  let errors = {};\r\n  if (!values.business_name) {\r\n    errors.business_name = \"Business name is required.\";\r\n  } else if (noHtmlRegex.test(values.business_name)) {\r\n    errors.business_name = messages.invalid;\r\n  }\r\n\r\n  if (!values.brand_logo && tmpUrl === null) {\r\n    errors.brand_logo = \"Logo image is required.\";\r\n  }\r\n\r\n  if (values.brand_logo !== null ? values.brand_logo.size >= 2000000 : false) {\r\n    errors.brand_logo = \"The brand logo may not be greater than 2048 kilobytes.\";\r\n  }\r\n\r\n  if (values.outlet_id === null) {\r\n    errors.outlet_id = \"Please select  location.\";\r\n  }\r\n  if (values.template_id !== null ? values.template_id.length === 0 : true) {\r\n    errors.template_id = \"Template is required.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\nexport const goalValidator = (values, tmpUrl) => {\r\n  let errors = {};\r\n  if (!values.type) {\r\n    errors.type = \"Goal type is required.\";\r\n  }\r\n\r\n  if (!values.count) {\r\n    errors.count = \"Count  is required.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const CustomerExperianceValidator = (values, tmpUrl) => {\r\n  let errors = {};\r\n  if (!values.cust_heading) {\r\n    errors.cust_heading = \"Review title required.\";\r\n  } else if (values.cust_heading.length > 200) {\r\n    errors.cust_heading = \"The customer heading may not be greater than 200 characters.\";\r\n  } else if (noHtmlRegex.test(values.cust_heading)) {\r\n    errors.cust_heading = messages.invalid;\r\n  }\r\n\r\n  if (!values.brand_logo && tmpUrl === null) {\r\n    errors.brand_logo = \"Logo image is required.\";\r\n  }\r\n\r\n  if (values.brand_logo !== null ? values.brand_logo.size >= 2000000 : false) {\r\n    errors.brand_logo = \"The brand logo may not be greater than 2048 kilobytes.\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const setRuleValidator = (values, completeRule) => {\r\n  let errors = {};\r\n  // if (!values.rule_title) {\r\n  //   errors.rule_title = \"Rule Title is  required.\";\r\n  // }\r\n  if (values.rule_title.includes(\"  \")) {\r\n    errors.rule_title = messages.invalid;\r\n  } else if (noHtmlRegex.test(values.rule_title)) {\r\n    errors.rule_title = messages.invalid;\r\n  }\r\n\r\n  if (!values.starify_review_message) {\r\n    errors.starify_review_message = \"Starify review message is required.\";\r\n  } else if (noHtmlRegex.test(values.starify_review_message)) {\r\n    errors.starify_review_message = messages.invalid;\r\n  }\r\n\r\n  if (!values.button_title) {\r\n    errors.button_title = \"Button Title is required.\";\r\n  } else if (values.button_title.length > 100) {\r\n    errors.button_title = \"Customer button title should not be greater than 100.\";\r\n  } else if (noHtmlRegex.test(values.button_title)) {\r\n    errors.button_title = messages.invalid;\r\n  }\r\n  // if(!completeRule.some(item=> item===1)){\r\n  //   errors.star1 = true;\r\n  // }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const ruleValidator = (fieldName, value, preErrors) => {\r\n  let errors = { ...preErrors };\r\n\r\n  // if (ruleType === \"tags\") {\r\n  //   if (!values.question) {\r\n  //     errors.question = \"Question is required.\";\r\n  //     document.querySelector(\".\" + RuleClass + \" .tagQuestion\").focus();\r\n  //   } else if (noHtmlRegex.test(values.question)) {\r\n  //     document.querySelector(\".\" + RuleClass + \" .tagQuestion\").focus();\r\n  //     errors.question = messages.invalid;\r\n  //   }\r\n  //   if (tags.length === 0) {\r\n  //     errors.tagsInput = \"Tags are required.\";\r\n  //     document.querySelector(\".\" + RuleClass + \" .tagsInput\").focus();\r\n  //   }\r\n  // }\r\n  // if (ruleType === \"question\") {\r\n  //   if (questions.length === 0) {\r\n  //     errors.questionInput = \"Questions are required.\";\r\n  //     document.querySelector(\".\" + RuleClass + \" .questionInput\").focus();\r\n  //   }\r\n  // }\r\n\r\n  // if (!values.thanks_message) {\r\n  //   errors.thanks_message = \"Thanks Message is required.\";\r\n  //   document.querySelector(\".\" + RuleClass + \" .thanks_message\").focus();\r\n  // } else if (noHtmlRegex.test(values.thanks_message)) {\r\n  //   document.querySelector(\".\" + RuleClass + \" .thanks_message\").focus();\r\n  //   errors.thanks_message = messages.invalid;\r\n  // }\r\n\r\n  // if (values.additional_message) {\r\n  //   if (values.additional_message.includes(\"  \")) {\r\n  //     errors.additional_message = messages.invalid;\r\n  //     document.querySelector(\".\" + RuleClass + \" .additional_message\").focus();\r\n  //   } else if (noHtmlRegex.test(values.additional_message)) {\r\n  //     errors.additional_message = messages.invalid;\r\n  //     document.querySelector(\".\" + RuleClass + \" .additional_message\").focus();\r\n  //   } else if (values.additional_message.length > 200) {\r\n  //     errors.additional_message =\r\n  //       \"Additional message title  should not be greater than 200\";\r\n  //     document.querySelector(\".\" + RuleClass + \" .additional_message\").focus();\r\n  //   }\r\n  // }\r\n\r\n  if (fieldName === \"additional_message\") {\r\n    if (!value) {\r\n      errors[fieldName] = \"Thanks message is required.\";\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.includes(\"  \")) {\r\n      errors[fieldName] = messages.invalid;\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (noHtmlRegex.test(value)) {\r\n      errors[fieldName] = messages.invalid;\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.length > 200) {\r\n      errors[fieldName] = \"Thanks message  should not be greater than 200\";\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else {\r\n      errors[fieldName] = null;\r\n    }\r\n  }\r\n  if (fieldName === \"rule_message\") {\r\n    if (!value) {\r\n      errors[fieldName] = \"Review page title is required.\";\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.includes(\"  \")) {\r\n      errors[fieldName] = messages.invalid;\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (noHtmlRegex.test(value)) {\r\n      errors[fieldName] = messages.invalid;\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.length > 200) {\r\n      errors[fieldName] = \"Review page title  should not be greater than 200\";\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else {\r\n      errors[fieldName] = null;\r\n    }\r\n  }\r\n\r\n  if (fieldName === \"thanks_message\") {\r\n    if (!value) {\r\n      errors[fieldName] = \"Thanks message  is required.\";\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.includes(\"  \")) {\r\n      errors[fieldName] = messages.invalid;\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (noHtmlRegex.test(value)) {\r\n      errors[fieldName] = messages.invalid;\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else if (value.length > 200) {\r\n      errors[fieldName] = \"Thanks message  should not be greater than 200\";\r\n      // document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else {\r\n      errors[fieldName] = null;\r\n    }\r\n  }\r\n\r\n  if (fieldName === \"question\") {\r\n    if (value ? value.length === 0 : true) {\r\n      errors[fieldName] = \"Question is required.\";\r\n      //document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n    } else {\r\n      errors[fieldName] = null;\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const validateRules = (ruleData, RuleClass) => {\r\n  let errors = {};\r\n\r\n  if (ruleData.rule_type === \"tags\") {\r\n    if (ruleData.question ? ruleData.question.length === 0 : true) {\r\n      errors.question = \"Question is required.\";\r\n      if (RuleClass) {\r\n        document.querySelector(\".\" + RuleClass + \" .tagQuestion\").focus();\r\n      }\r\n    }\r\n    if (ruleData.tags ? ruleData.tags.length === 0 : true) {\r\n      errors.tagsInput = \"Tags are required.\";\r\n      if (RuleClass) {\r\n        document.querySelector(\".\" + RuleClass + \" .tagsInput\").focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (ruleData.rule_type === \"question\") {\r\n    if (ruleData.question ? ruleData.question.length === 0 : true) {\r\n      errors.questionInput = \"Questions are required.\";\r\n      if (RuleClass) {\r\n        document.querySelector(\".\" + RuleClass + \" .questionInput\").focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!ruleData.thanks_message) {\r\n    errors.thanks_message = \"Thanks Message is required.\";\r\n    if (RuleClass) {\r\n      document.querySelector(\".\" + RuleClass + \" .thanks_message\").focus();\r\n    }\r\n  } else if (noHtmlRegex.test(ruleData.thanks_message)) {\r\n    if (RuleClass) {\r\n      document.querySelector(\".\" + RuleClass + \" .thanks_message\").focus();\r\n    }\r\n    errors.thanks_message = messages.invalid;\r\n  }\r\n\r\n  // if (ruleData.additional_message) {\r\n  //   if (ruleData.additional_message.includes(\"  \")) {\r\n  //     errors.additional_message = messages.invalid;\r\n  //     if (RuleClass) {\r\n  //       document\r\n  //         .querySelector(\".\" + RuleClass + \" .additional_message\")\r\n  //         .focus();\r\n  //     }\r\n  //   } else if (noHtmlRegex.test(ruleData.additional_message)) {\r\n  //     errors.additional_message = messages.invalid;\r\n  //     if (RuleClass) {\r\n  //       document\r\n  //         .querySelector(\".\" + RuleClass + \" .additional_message\")\r\n  //         .focus();\r\n  //     }\r\n  //   } else if (ruleData.additional_message.length > 200) {\r\n  //     errors.additional_message =\r\n  //       \"Additional message title  should not be greater than 200\";\r\n  //     if (RuleClass) {\r\n  //       document\r\n  //         .querySelector(\".\" + RuleClass + \" .additional_message\")\r\n  //         .focus();\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // if (!ruleData.rule_message) {\r\n  //   errors.rule_message = \"Review page title is required.\";\r\n  //   if (RuleClass) {\r\n  //     document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n  //   }\r\n  // } else if (ruleData.rule_message) {\r\n  //   if (ruleData.rule_message.includes(\"  \")) {\r\n  //     errors.rule_message = messages.invalid;\r\n  //     if (RuleClass) {\r\n  //       document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n  //     }\r\n  //   } else if (noHtmlRegex.test(ruleData.additional_message)) {\r\n  //     errors.rule_message = messages.invalid;\r\n  //     if (RuleClass) {\r\n  //       document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n  //     }\r\n  //   } else if (ruleData.additional_message.length > 200) {\r\n  //     errors.rule_message = \"Review page title  should not be greater than 200\";\r\n  //     if (RuleClass) {\r\n  //       document.querySelector(\".\" + RuleClass + \" .rule_message\").focus();\r\n  //     }\r\n  //   }\r\n  //}\r\n\r\n  return errors;\r\n};\r\n\r\nexport const cloneTemplateValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.template_title) {\r\n    errors.template_title = \"Template Title is  required.\";\r\n  } else if (noHtmlRegex.test(values.template_title)) {\r\n    errors.template_title = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const reviewValidator = (values, ruleValue, noEmail) => {\r\n  let errors = {};\r\n  console.log(values);\r\n  if (ruleValue.tell_us_more) {\r\n    if (!values.tell_us_more) {\r\n      errors.tell_us_more = \"Field is required.\";\r\n    } else if (values.tell_us_more.includes(\"  \")) {\r\n      errors.tell_us_more = messages.invalid;\r\n    } else if (noHtmlRegex.test(values.tell_us_more)) {\r\n      errors.tell_us_more = messages.invalid;\r\n    }\r\n  }\r\n  if (ruleValue.rule_type === \"tags\") {\r\n    if (values.question.length === 0) {\r\n      errors.tags = \"please select atleast one tag.\";\r\n    }\r\n  }\r\n  if (ruleValue.rule_type === \"question\") {\r\n    for (let i = 0; i < ruleValue.question.length; i++) {\r\n      if (!values[\"question\" + i]) {\r\n        errors[\"question\" + i] = \"This Field required.\";\r\n      } else if (values[\"question\" + i].includes(\"  \")) {\r\n        errors[\"question\" + i] = \"Please remove extra whitespace.\";\r\n      }\r\n    }\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const replyValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (!values.reply_comment) {\r\n    errors.reply_comment = \"Please add your Comment First!\";\r\n  }\r\n  if (noHtmlRegex.test(values.reply_comment)) {\r\n    errors.reply_comment = messages.invalid;\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const ticketValidtor = (values) => {\r\n  let errors = {};\r\n  // if (!values.assigned_to) {\r\n  //   errors.assigned_to = \"Please Select a user to assign\";\r\n  // }\r\n  // if (!values.priority) {\r\n  //   errors.priority = \"Please Select a priortiy\";\r\n  // }\r\n  // if (!values.comments) {\r\n  //   errors.comments = \"Please Enter your comment\";\r\n  // }\r\n  // if (noHtmlRegex.test(values.reply_comment)) {\r\n  //   errors.reply_comment = messages.invalid;\r\n  // }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const autoReplayValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.title) {\r\n    errors.title = \"Title is required.\";\r\n  }\r\n  if (values.review_type !== null ? values.review_type.length === 0 : true) {\r\n    errors.review_type = \"Review Type is Required.\";\r\n  }\r\n  if (values.outlet_id !== null ? values.outlet_id.length === 0 : true) {\r\n    errors.outlet_id = \"Please select at least one location.\";\r\n  }\r\n  if (values.review_template_id !== null ? values.review_template_id.length === 0 : true) {\r\n    errors.review_template_id = \"Review Template is required.\";\r\n  }\r\n  if (!values.day && !values.hours && !values.minutes) {\r\n    errors.day = \"Time is required.\";\r\n  }\r\n\r\n  if (values.day && parseInt(values.day) > 10) {\r\n    errors.day = \"you cannot select more than 10 days.\";\r\n  }\r\n  if (values.hours && parseInt(values.hours) > 24) {\r\n    errors.hours = \"you cannot select more than 24 hours.\";\r\n  }\r\n  if (values.c && parseInt(values.minutes) > 60) {\r\n    errors.minutes = \"you cannot select more than 60 minutes.\";\r\n  }\r\n  // if (!values.priority) {\r\n  //   errors.priority = \"Please Select a priortiy\";\r\n  // }\r\n  // if (!values.comments) {\r\n  //   errors.comments = \"Please Enter your comment\";\r\n  // }\r\n  // if (noHtmlRegex.test(values.reply_comment)) {\r\n  //   errors.reply_comment = messages.invalid;\r\n  // }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const regionValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Add Region Name\";\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport const FeildManageValidatorPassword = (values) => {\r\n  // console.log(values);\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is Required\";\r\n  }\r\n  if (!values.password) {\r\n    errors.password = \"Old Password is Required\";\r\n  }\r\n  if (!values.newPassword) {\r\n    errors.newPassword = \"New Password is Required\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const TemplateValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (!values.name) {\r\n    errors.name = \"Template Name is Required\";\r\n  }\r\n  if (!values.upload_docs) {\r\n    errors.upload_docs = \"Upload Docs is Required\";\r\n  }\r\n\r\n  if (values.price < 1) {\r\n    errors.price = \"Price must be greater than 0\";\r\n  }\r\n  if (!values.price) {\r\n    errors.price = \"Price is Required\";\r\n  }\r\n  if (!values.service_details) {\r\n    errors.service_details = \"Service Details is Required\";\r\n  }\r\n  if (!values.description) {\r\n    errors.description = \"Description is Required\";\r\n  }\r\n  if (values.sign_fee < 1) {\r\n    errors.sign_fee = \"Sign Fee must be greater than 0\";\r\n  }\r\n  if (!values.sign_fee) {\r\n    errors.sign_fee = \"Sign Fee is Required\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const disAppValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (values.first_Name_check == true) {\r\n    if (!values.first_Name) {\r\n      errors.first_Name = messages.invalid;\r\n    }\r\n  }\r\n  if (values.last_Name_check == true) {\r\n    if (!values.last_Name) {\r\n      errors.last_Name = messages.invalid;\r\n    }\r\n  }\r\n  if (values.user_email_check == true) {\r\n    if (!values.user_email) {\r\n      errors.user_email = messages.invalid;\r\n    }\r\n  }\r\n  if (values.mobile_Number_check == true) {\r\n    if (!values.mobile_Number) {\r\n      errors.mobile_Number = messages.invalid;\r\n    }\r\n  }\r\n  if (values.user_business_logo_check == true) {\r\n    if (!values.user_business_logo) {\r\n      errors.user_business_logo = messages.invalid;\r\n    }\r\n  }\r\n  if (values.user_firm_name_check == true) {\r\n    if (!values.user_firm_name) {\r\n      errors.user_firm_name = messages.invalid;\r\n    }\r\n  }\r\n  return errors;\r\n};\r\nexport const pressValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.yearDate) {\r\n    errors.yearDate = \"Year is Required\";\r\n  }\r\n  if (!values.title) {\r\n    errors.title = \"Title is Required\";\r\n  } else if (values.title.length > 40) {\r\n    errors.title = \"Title can't be exceed more than 40 characters\";\r\n  }\r\n  if (!values.description) {\r\n    errors.description = \"Description is Required\";\r\n  }\r\n  return errors;\r\n};\r\nexport const testValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.clientName) {\r\n    errors.clientName = \"Client Name is Required\";\r\n  } else if (values.clientName.length > 40) {\r\n    errors.clientName = \"Client Name can't be exceed more than 40 characters\";\r\n  }\r\n  if (!values.image[0]) {\r\n    errors.image = \"Upload image\";\r\n  }\r\n  if (!values.description) {\r\n    errors.description = \"Description is Required\";\r\n  }\r\n  if (values.description.length > 250) {\r\n    errors.description = \"Description can't be exceed more than 250 characters\";\r\n  }\r\n  if (!values.location) {\r\n    errors.location = \"Lcation is Required\";\r\n  }\r\n  return errors;\r\n};\r\nexport const catValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (!values.catName) {\r\n    errors.catName = \"Name is Required\";\r\n  } else if (values.catName.length > 40) {\r\n    errors.catName = \"Name can't be exceed more than 40 characters\";\r\n  }\r\n  if (!values.desciption) {\r\n    errors.desciption = \"Description is Required\";\r\n  } else if (values.desciption.length > 250) {\r\n    errors.desciption = \"Description can't be exceed more than 250 characters\";\r\n  }\r\n  return errors;\r\n};\r\nexport const attValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (!values.fieldType) {\r\n    errors.fieldType = \"Type is Required\";\r\n  } else if (values.fieldType == \"Dropdown\") {\r\n    if (values.valueInArray.length == 0) {\r\n      errors.valueInArray = \"Options is Required\";\r\n    }\r\n  }\r\n  if (!values.title) {\r\n    errors.title = \"Title is Required\";\r\n  }\r\n  if (!values.placeholder) {\r\n    errors.placeholder = \"Placeholder is Required\";\r\n  }\r\n  return errors;\r\n};\r\nexport const opNameValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.option_name) {\r\n    errors.option_name = \"Name is Required\";\r\n  }\r\n  return errors;\r\n};\r\nexport const notificationValidator = (values) => {\r\n  let errors = {};\r\n  if (!values.title) {\r\n    errors.title = \"Title is Required\";\r\n  } else if (values.title.length > 40) {\r\n    errors.title = \"Title can't be exceed more than 40 characters\";\r\n  }\r\n  if (!values.description) {\r\n    errors.description = \"Description is Required\";\r\n  } else if (values.description.length > 250) {\r\n    errors.description = \"Description can't be exceed more than 250 characters\";\r\n  }\r\n  // else if (values.description.length > 250) {\r\n  //   errors.description = \"Limit exceed\";\r\n  // }\r\n  console.log(values);\r\n  return errors;\r\n};\r\nexport const blogValidator = (values) => {\r\n  console.log(values);\r\n  let errors = {};\r\n  if (!values.title) {\r\n    errors.title = \"Title is Required\";\r\n  } else if (values.title.length > 40) {\r\n    errors.title = \"Title can't be exceed more than 40 characters\";\r\n  }\r\n  if (!values.short_description) {\r\n    errors.short_description = \"Short Description is Required\";\r\n  }\r\n  if (!values.details_description) {\r\n    errors.details_description = \"Detailed Description is Required\";\r\n  }\r\n  if (values.image.length == 0) {\r\n    errors.image = \"Select Image\";\r\n  }\r\n  // if (!values.image) {\r\n  //   errors.image = \"Select Image\";\r\n  // }\r\n  return errors;\r\n};\r\n\r\n\r\nexport const subAdminEmailValidator = (values) => {\r\n  console.log(values);\r\n  let regex=/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is Required\";\r\n  } else if (!values.email.match(regex)) {\r\n    errors.email = \"Invalid Email\";\r\n  }\r\n  \r\n  return errors;\r\n};\r\n\r\nexport const roleManagementValidator = (values) => {\r\n  \r\n  let errors = {};\r\n  if (!values.roll_name) {\r\n    errors.roll_name = \"Role Name is Required\";\r\n  }\r\n  if(values.roll_access.length===0){\r\n    errors.panel=\"Select One Panel\"\r\n  }\r\n  \r\n  return errors;\r\n};\r\nexport const SubAdminManagementValidator= (values) => {\r\n  console.log(values);\r\n  let regex=/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/\r\n  let errors = {};\r\n  if (!values.email) {\r\n    errors.email = \"Email is Required\";\r\n  } else if (!values.email.match(regex)) {\r\n    errors.email = \"Invalid Email\";\r\n  }\r\n  if(!values.roll_access_id){\r\n    errors.role=\"Select One Role\"\r\n  }\r\n  \r\n  return errors;\r\n};"],"sourceRoot":""}